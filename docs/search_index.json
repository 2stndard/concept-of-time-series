[["시계열-forecasting-part-ii-시계열-모델링-알고리즘.html", "Chapter 6 시계열 forecasting Part II - 시계열 모델링 알고리즘", " Chapter 6 시계열 forecasting Part II - 시계열 모델링 알고리즘 A future like the past: 시계열 예측의 가장 기본적인 가정은 과거의 패턴은 미래에도 계속된다는 가정이다. 이 가정은 단기 미래에서는 데이터가 발생되는 환경이 현재와 유사하기 때문에 불확실성이 작지만 장기 미래로 갈수록 데이터가 발생되는 환경이 달라질 가능성이 높아지면서 예측 데이터에 대한 불확실성이 높아질 수 밖에 없다. 이러한 이유때문에 시계열 예측은 외부 충격이나 원인모를 이유에 의한 갑작스런 데이터 흐름 변화를 예측해낼 수 없다는 한계를 지닌다. 그런 지점을 전환점(Turning Point)라고 한다. 이 전환점은 시계열 분석에 있어 중요한 부분이지만 전환점을 예측하기 위해서는 전통적인 시계열 분석 기법보다는 다른 기법을 활용해야 할 수 있다.2 본 장에서는 세가지 데이터를 이용하여 알고리즘을 적용한다. 첫번째 데이터는 교육통계홈페이지에서 다운로드 받은 students 데이터로 1999년부터 2020년까지의 전국 학생수 데이터이고, 두번째 데이터는 KOSIS에서 다운로드 받은 경제활동인구조사 데이터 중 전체 취업자 데이터로 2003.1월부터 2020년 12월까지의 데이터, 세번째 데이터는 두번째 데이터와 같은 조사에서 얻어진 데이터로 교육서비스업 데이터이다. 첫번째 데이터는 년별 데이터이기 때문에 추세는 보이지만 계절성은 없고 두번째와 세번째 데이터는 월별 데이터이지만 두번째 데이터는 세번째 데이터보다 계절성이 더 짙은 데이터이다. https://hbr.org/1971/07/how-to-choose-the-right-forecasting-technique "],["simple-모델링-알고리즘.html", "6.1 Simple 모델링 알고리즘", " 6.1 Simple 모델링 알고리즘 simple 모델링 알고리즘은 Rob Hyndman의 ’Forecasting : principals and practice’에서 그룹핑한 알고리즘과 명칭을 사용했다.3 따라서 Simple 모델링이라는 명칭과 알고리즘들은 일반적인 분류는 아닐수 있다. 사실 Simple 알고리즘을 보면 ’이게 무슨 예측이야?’라고 생각할 수도 있다. 하지만 우리가 매우 쉽게 접하고 사용하는 ’평균’이라는 것도 통계적 모델링에 하나라고 보면 Simple 알고리즘도 충분히 시계열 데이터의 모델링으로 볼 수도 있다. Simple 모델링의 대부분은 매우 간단한 개념을 함수화 하여 미래 예측에 활용할 수 있도록 제작되었다. Simple 모델링에서 제시하는 대부분의 함수는 forecast 패키지(앞에서 설명한 Rob Hyndman이 주도하여 제작된 패키지임)에서 제공하는 함수를 위주로 설명하고자 한다.4 6.1.1 평균 모델(forecast::meanf) 평균 모델은 우리가 흔히 알고 있는 평균이 앞으로의 미래에도 적용하는 방법이다. forecast 패키지에서는 meanf() 함수를 통해 시계열 데이터의 평균을 활용한 미래 예측값을 반환하는 함수를 제공한다. 이 함수에서는 평균 모델에 의한 점 예측값(Point Forecast)뿐 아니라 예측구간 80%와 95%를 산출해 준다. 매개변수를 설정함으로써 이 예측구간을 Bootstrap 방법을 통해 산출할 수도 있다. meanf() 함수의 입력 데이터는 숫자 벡터나 ts 클래스 객체를 사용한다. meanf()함수의 결과를 plot하기 위해서는 autoplot() 함수에 meanf() 결과 객체를 전달하여 ploting 할 수 있다. library(forecast) summary(meanf(students.total.ts[,1])) ## ## Forecast method: Mean ## ## Model Information: ## $mu ## [1] 7598603 ## ## $mu.se ## [1] 189914 ## ## $sd ## [1] 890775.4 ## ## $bootstrap ## [1] FALSE ## ## $call ## meanf(y = students.total.ts[, 1]) ## ## attr(,&quot;class&quot;) ## [1] &quot;meanf&quot; ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -1.694451e-10 870295.1 780669 -1.422719 10.7441 6.074563 0.8753895 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 7598603 6393450 8803757 5704501 9492706 ## 2022 7598603 6393450 8803757 5704501 9492706 ## 2023 7598603 6393450 8803757 5704501 9492706 ## 2024 7598603 6393450 8803757 5704501 9492706 ## 2025 7598603 6393450 8803757 5704501 9492706 ## 2026 7598603 6393450 8803757 5704501 9492706 ## 2027 7598603 6393450 8803757 5704501 9492706 ## 2028 7598603 6393450 8803757 5704501 9492706 ## 2029 7598603 6393450 8803757 5704501 9492706 ## 2030 7598603 6393450 8803757 5704501 9492706 autoplot(meanf(students.total.ts[,1])) autoplot(meanf(students.total.ts[,1], bootstrap = TRUE)) autoplot(meanf(employees.ts[,2])) autoplot(meanf(employees.ts[,3])) 6.1.2 단순(Naive) 모델 단순(Naive) 모델은 시계열 측정값의 마지막 값이 지속될 것이라는 가정하에 향후 데이터값을 예측하는 모델이다. 이 모델은 경제 금융 시계열 모델에서 많이 사용된다.5 앞선 평균 모델과 달리 Naive 모델의 예측구간은 예측 시간이 늘어날수록 범위가 늘어난다. 일반적으로 시계열 모델의 예측구간은 예측기간이 늘어날 수록 범위가 넓어지는 경향을 지닌다. summary(naive(students.total.ts[,1])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = students.total.ts[, 1]) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(naive(students.total.ts[,1])) summary(naive(employees.ts[,2])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(naive(employees.ts[,2])) summary(naive(employees.ts[,2])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(naive(employees.ts[,3])) 6.1.3 계절성 단순(Seasonal Naive) 모델 계절성 단순(Seasonal Naive) 모델은 단순(Naive) 모델에서 계절성을 추가한 모델이다. 계절성(Seasonal Pattern)은 주기성(Cyclic Pattern)과 다르다. 계절성은 일정한 주기를 가지고 반복되는 패턴을 의미하지만 주기성은 패턴은 반복되지만 주기가 일정하지 않다는 점에서 다르다. 주기성의 주기는 일반적으로 2년보다 크기때문에 여러 연도에 걸쳐 나타나지만 계절성은 일반적으로 달력의 특성에 연관되어 주기를 갖는 경우가 일반적이다.6 summary(snaive(students.total.ts[,1], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = students.total.ts[, 1], h = 10) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(snaive(students.total.ts[,1], 10)) summary(snaive(employees.ts[,2], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = employees.ts[, 2], h = 10) ## ## Residual sd: 281.6863 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 229.2857 361.904 316.9524 0.8720369 1.19817 1 0.8173272 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26800 26336.2 27263.8 26090.68 27509.32 ## Feb 2021 26838 26374.2 27301.8 26128.68 27547.32 ## Mar 2021 26609 26145.2 27072.8 25899.68 27318.32 ## Apr 2021 26562 26098.2 27025.8 25852.68 27271.32 ## May 2021 26930 26466.2 27393.8 26220.68 27639.32 ## Jun 2021 27055 26591.2 27518.8 26345.68 27764.32 ## Jul 2021 27106 26642.2 27569.8 26396.68 27815.32 ## Aug 2021 27085 26621.2 27548.8 26375.68 27794.32 ## Sep 2021 27012 26548.2 27475.8 26302.68 27721.32 ## Oct 2021 27088 26624.2 27551.8 26378.68 27797.32 autoplot(snaive(employees.ts[,2], 10)) summary(snaive(employees.ts[,3], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = employees.ts[, 3], h = 10) ## ## Residual sd: 61.3048 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 4.5 61.10471 50.45238 0.1996211 2.735763 1 0.8602258 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 1844 1765.691 1922.309 1724.237 1963.763 ## Feb 2021 1828 1749.691 1906.309 1708.237 1947.763 ## Mar 2021 1770 1691.691 1848.309 1650.237 1889.763 ## Apr 2021 1759 1680.691 1837.309 1639.237 1878.763 ## May 2021 1814 1735.691 1892.309 1694.237 1933.763 ## Jun 2021 1829 1750.691 1907.309 1709.237 1948.763 ## Jul 2021 1831 1752.691 1909.309 1711.237 1950.763 ## Aug 2021 1793 1714.691 1871.309 1673.237 1912.763 ## Sep 2021 1768 1689.691 1846.309 1648.237 1887.763 ## Oct 2021 1772 1693.691 1850.309 1652.237 1891.763 autoplot(snaive(employees.ts[,3], 10)) 6.1.4 random work 모델 랜덤 워크는 시간적으로 다음값이 시간적으로 현재값의 영향을 받는다는 이론이다. 주식의 예에서 보면 내일의 종가는 오늘의 종가에 랜덤한 값이 더해지거나 빼져서 결정되는 것과 같은 이치이다. 랜덤 워크에는 어제값 이외에 의미있는 정보가 없기 때문에 예측이 복잡하지 않다7. 앞에서 설명한 Naive 모델은 마지막 값이 지속되는 예측인데 이것이 결국 랜덤 워크와 동일한 결과를 가지게 된다. 랜덤 워크 모델은 드리프트가 없는 모델과 드리프트가 존재하는 모델의 두가지 종류가 있다. 드리프트가 존재하는 모델은 랜덤워크 모델을 기반으로 하지만 예측값이 시간의 흐름에 따라 증가하거나 감소하는 모델이다. summary(rwf(students.total.ts[,1])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = students.total.ts[, 1]) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(rwf(students.total.ts[,1])) summary(rwf(employees.ts[,2])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(rwf(employees.ts[,2])) summary(rwf(employees.ts[,2])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(rwf(employees.ts[,3])) summary(rwf(students.total.ts[,1], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = students.total.ts[, 1], drift = TRUE) ## ## Drift: -126815.1905 (se 16988.204) ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -1.773887e-10 75973.56 63881.97 -0.06808499 0.8320398 0.4970802 ## ACF1 ## Training set 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5868424 5768655 5968192 5715841 6021006 ## 2022 5741609 5597194 5886023 5520746 5962471 ## 2023 5614793 5433948 5795639 5338214 5891373 ## 2024 5487978 5274664 5701292 5161743 5814214 ## 2025 5361163 5117753 5604573 4988899 5733427 ## 2026 5234348 4962425 5506271 4818478 5650218 ## 2027 5107533 4808227 5406838 4649785 5565281 ## 2028 4980717 4654875 5306560 4482385 5479050 ## 2029 4853902 4502177 5205628 4315985 5391820 ## 2030 4727087 4349998 5104176 4150379 5303795 autoplot(rwf(students.total.ts[,1], drift = TRUE)) summary(rwf(employees.ts[,2], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = employees.ts[, 2], drift = TRUE) ## ## Drift: 23.5684 (se 26.8599) ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 9.956667e-13 260.416 190.0696 -0.0013627 0.7245059 0.5996787 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26549.57 26214.06 26885.08 26036.45 27062.68 ## Feb 2021 26573.14 26096.17 27050.11 25843.68 27302.60 ## Mar 2021 26596.71 26009.50 27183.91 25698.66 27494.75 ## Apr 2021 26620.27 25938.75 27301.80 25577.97 27662.58 ## May 2021 26643.84 25877.99 27409.69 25472.58 27815.10 ## Jun 2021 26667.41 25824.24 27510.58 25377.89 27956.93 ## Jul 2021 26690.98 25775.71 27606.25 25291.19 28090.76 ## Aug 2021 26714.55 25731.25 27697.84 25210.72 28218.37 ## Sep 2021 26738.12 25690.07 27786.16 25135.27 28340.96 ## Oct 2021 26761.68 25651.60 27871.77 25063.95 28459.41 autoplot(rwf(employees.ts[,2], drift = TRUE)) summary(rwf(employees.ts[,2], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = employees.ts[, 2], drift = TRUE) ## ## Drift: 23.5684 (se 26.8599) ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 9.956667e-13 260.416 190.0696 -0.0013627 0.7245059 0.5996787 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26549.57 26214.06 26885.08 26036.45 27062.68 ## Feb 2021 26573.14 26096.17 27050.11 25843.68 27302.60 ## Mar 2021 26596.71 26009.50 27183.91 25698.66 27494.75 ## Apr 2021 26620.27 25938.75 27301.80 25577.97 27662.58 ## May 2021 26643.84 25877.99 27409.69 25472.58 27815.10 ## Jun 2021 26667.41 25824.24 27510.58 25377.89 27956.93 ## Jul 2021 26690.98 25775.71 27606.25 25291.19 28090.76 ## Aug 2021 26714.55 25731.25 27697.84 25210.72 28218.37 ## Sep 2021 26738.12 25690.07 27786.16 25135.27 28340.96 ## Oct 2021 26761.68 25651.60 27871.77 25063.95 28459.41 autoplot(rwf(employees.ts[,3], drift = TRUE)) 랜덤 워크는 시간적으로 하나 앞선 값과 현재값을 뺀 차이값들은 백색잡음이 되어야한다는 조건을 만족해야한다. 따라서 랜덤 워크 모델은 차분을 통해서백색잡음이 될 수도 있고 백색잡음은 누적합계를 통해서 랜덤 워크가 될 수 있다. set.seed(345) whitenoise &lt;- ts(rnorm(100), start = 1) # white noise simulation 데이터 생성 ts.plot(whitenoise) whitenoise.to.randomwalk &lt;- cumsum(whitenoise) # white noise 데이터로 random walk 생성 ts.plot(whitenoise.to.randomwalk) randomwalk.to.whitenoise &lt;- diff(whitenoise.to.randomwalk) # random walk에서 white noise 생성 ts.plot(randomwalk.to.whitenoise) 6.1.5 Simple 모델 비교 위에서 설명한 모델들을 하나의 plot으로 그려보면 모델 간의 차이를 살펴볼 수 있다. autoplot(meanf(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(students.total.ts[,1], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) autoplot(meanf(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(employees.ts[,2], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(employees.ts[,2], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) autoplot(meanf(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(employees.ts[,3], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(employees.ts[,3], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) https://otexts.com/fpp2/ https://otexts.com/fpp2/simple-methods.html https://otexts.com/fpp2/simple-methods.html https://robjhyndman.com/hyndsight/cyclicts/ https://robjhyndman.com/files/solutions.pdf "],["regression-모델.html", "6.2 Regression 모델", " 6.2 Regression 모델 회귀 모델은 선형 회귀(Linear Regression), 비선형 회귀,(Non-linear Regression) 로지스틱 회귀(Logistic Regression) 등의 방법이 있다. 회귀 모델은 종속변수와 독립변수와의 관계를 가장 잘 나타내는 회귀방정식을 도출하여 미래 데이터에 대한 예측치를 생성하는 방법으로 아직도 머신러닝 알고리즘 중에 가장 많이 사용되는 알고리즘 중에 하나이다.8 본 문서에서는 R에서 회귀 알고리즘을 구현하는 방법을 다루지는 않고 시계열 데이터의 회귀 알고리즘을 적용하는 방법에 대해 설명하겠다. 시계열 데이터의 회귀 모델은 두가지로 구분할 수 있다. 첫번째는 두가지이상의 시계열 데이터(Multivariate) 간의 회귀 모델과 한가지 시계열 데이터(Univariate)의 시간에 따른 회귀모델이다. 사실 첫번째 모델의 경우는 일반적 회귀모델과 큰 차이는 없지만 사용하는 함수는 시계열 패키지에서 따로 제공된다. 두번째 모델의 경우는 시계열 데이터의 특성인 추세(trend)와 계절성(season), 반복성(cycle)을 회귀에 반영한다는 점에서 일반적 회귀와는 차이가 있다. 6.2.1 시계열 선형회귀(Timer Series Linear Regression) 모델 시계열 선형 회귀 모델은 데이터간의 관계를 가장 잘 나타내는 직선(Linear)을 산출하여 미래 데이터를 예측하는 방법이다. 선형 회귀 모델은 선형 방정식으로 표현되는데 직선의 기울기(Slope)와 Y 축 절편(Intercept)의 계수(Coefficient)가 산출된다. 시계열 데이터의 선형 회귀를 위해서 forecast 패키지에서 tslm()함수, timetk 패키지의 plot_time_series_regressino() 함수(stats::lm() 함수를 사용하여 선형회귀 결과를 ploting하는 함수), modeltime 패키지(timetk 패키지의 모델링 패키지)의 linear_reg() 함수 등을 사용할 수 있다. tslm 함수(forecast 패키지) forecast 패키지에서 제공하는 tslm() 함수는 시계열 선형회귀 모델을 위한 함수이다. tslm() 함수는 lm() 함수의 래퍼 함수(Wrapper)로 사용법은 비슷하고 시간축이 독립변수에 포함되지 않은 두개 혹은 두개 이상의 시계열 객체에 대한 선형회귀는 lm() 함수의 결과와 같다. 즉 시계열 데이터이지만 독립변수 시간이 포함되지 않는다면 시계열 데이터로써의 특성이 적용되지 않은 양 데이터간의 특성정보만으로 선형회귀 방정식이 얻어진다. 반면 시간을 독립변수로 하여 선형회귀 모형을 적용하기 위해서는 ‘trend,’ ‘season’ 키워드를 함수식의 독립변수에 적용해 줌으로써 시간에 대한 선형회귀 방정식을 얻을 수 있다. ‘trend’는 시계열적인 추세를 반영하여 선형회귀 모델을 만들고 ’season’은 시계열의 계절성을 반영하여 회귀모델을 만들게 되는데 두가지를 모두 고려할 때는’+’ 기호로 연결하여 사용할 수 있다. 이 과정에서 추가적인 독립변수를 추가할 수도 있는데 독립변수를 추가할 때도 ‘+’ 기호를 사용하여 회귀모델을 만들 수 있다. # 전체 학생수 예측 모델을 추세를 반영하여 생성 student.ts.lm &lt;- tslm(students.total.ts[,3] ~ trend, data = students.total.ts) summary(student.ts.lm) ## ## Call: ## tslm(formula = students.total.ts[, 3] ~ trend, data = students.total.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -378680 -174765 -58 210909 243604 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4402542 91504 48.11 &lt; 2e-16 *** ## trend -88325 6967 -12.68 5.12e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 207300 on 20 degrees of freedom ## Multiple R-squared: 0.8893, Adjusted R-squared: 0.8838 ## F-statistic: 160.7 on 1 and 20 DF, p-value: 5.119e-11 student.ts.lm %&gt;% forecast() # tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2371064 2070723 2671405 1898355 2843772 ## 2022 2282739 1979011 2586467 1804699 2760779 ## 2023 2194414 1887058 2501769 1710664 2678163 ## 2024 2106089 1794874 2417304 1616265 2595912 ## 2025 2017763 1702466 2333061 1521514 2514013 ## 2026 1929438 1609843 2249033 1426426 2432451 ## 2027 1841113 1517015 2165212 1331013 2351214 ## 2028 1752788 1423989 2081588 1235288 2270288 ## 2029 1664463 1330773 1998153 1139266 2189660 ## 2030 1576138 1237376 1914899 1042959 2109317 student.ts.lm %&gt;% forecast() %&gt;% autoplot() student.ts.lm &lt;- tslm(students.total.ts[,5] ~ + trend, data = students.total.ts) # 초등학생 학생수를 예측모델에 독립변수로 트랜드를 사용하는 선형 모델을 생성 student.ts.lm %&gt;% forecast(h = 22) %&gt;% autoplot() student.ts.lm &lt;- tslm(students.total.ts[,5] ~ students.total.ts[,4] + trend, data = students.total.ts) # 초등학생 학생수를 예측모델에 독립변수로 유치원 학생수와 트랜드를 사용하는 선형 모델을 생성 student.ts.lm %&gt;% forecast(h = 22) %&gt;% autoplot() 위의 예제에서 사용한 데이터는 연도별 학생수의 합계이다. 이 데이터와 같은 연도별 데이터는 계절성이 존재하지 않기 때문에 season 키워드를 사용하면 아래와 같이 에러를 낸다. student.ts.lm &lt;- tslm(students.total.ts[,3] ~ trend + season, data = students.total.ts) ## Error in tslm(students.total.ts[, 3] ~ trend + season, data = students.total.ts): Non-seasonal data cannot be modelled using a seasonal factor 전체 취업자수와 교육서비스업 취업자수에 대한 선형회귀분석 모델과 plot은 다음과 같다. # 전체 취업자수를 추세(trend)만으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,2] ~ trend, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 2] ~ trend, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1256.4 -264.1 119.9 350.6 525.7 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 25430.605 85.545 297.28 &lt;2e-16 *** ## trend 20.394 1.531 13.32 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 415.8 on 94 degrees of freedom ## Multiple R-squared: 0.6536, Adjusted R-squared: 0.6499 ## F-statistic: 177.3 on 1 and 94 DF, p-value: &lt; 2.2e-16 employee.total.ts.lm %&gt;% forecast() # tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 27408.79 26860.89 27956.69 26565.89 28251.69 ## Feb 2021 27429.18 26880.94 27977.43 26585.75 28272.62 ## Mar 2021 27449.58 26900.97 27998.18 26605.59 28293.56 ## Apr 2021 27469.97 26921.01 28018.94 26625.43 28314.51 ## May 2021 27490.36 26941.03 28039.70 26645.25 28335.48 ## Jun 2021 27510.76 26961.05 28060.47 26665.07 28356.45 ## Jul 2021 27531.15 26981.06 28081.25 26684.87 28377.43 ## Aug 2021 27551.55 27001.06 28102.03 26704.66 28398.43 ## Sep 2021 27571.94 27021.06 28122.82 26724.45 28419.43 ## Oct 2021 27592.33 27041.05 28143.62 26744.22 28440.45 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() # 전체 취업자수를 추세(trend)와 계절성(season)으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,2] ~ trend + season, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 2] ~ trend + season, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -675.70 -42.60 76.66 147.08 312.95 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 24850.616 96.043 258.744 &lt; 2e-16 *** ## trend 19.457 0.919 21.171 &lt; 2e-16 *** ## season2 1.168 123.798 0.009 0.99249 ## season3 318.462 123.808 2.572 0.01189 * ## season4 629.005 123.825 5.080 2.29e-06 *** ## season5 869.174 123.849 7.018 5.63e-10 *** ## season6 919.342 123.880 7.421 9.13e-11 *** ## season7 935.260 123.918 7.547 5.14e-11 *** ## season8 803.429 123.962 6.481 6.13e-09 *** ## season9 854.597 124.013 6.891 9.94e-10 *** ## season10 890.516 124.071 7.177 2.75e-10 *** ## season11 898.809 124.135 7.241 2.07e-10 *** ## season12 385.477 124.207 3.104 0.00261 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 247.6 on 83 degrees of freedom ## Multiple R-squared: 0.8915, Adjusted R-squared: 0.8759 ## F-statistic: 56.86 on 12 and 83 DF, p-value: &lt; 2.2e-16 employee.total.ts.lm %&gt;% forecast() # tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26737.91 26392.65 27083.16 26206.34 27269.47 ## Feb 2021 26758.53 26413.28 27103.78 26226.97 27290.09 ## Mar 2021 27095.28 26750.03 27440.53 26563.72 27626.84 ## Apr 2021 27425.28 27080.03 27770.53 26893.72 27956.84 ## May 2021 27684.91 27339.65 28030.16 27153.34 28216.47 ## Jun 2021 27754.53 27409.28 28099.78 27222.97 28286.09 ## Jul 2021 27789.91 27444.65 28135.16 27258.34 28321.47 ## Aug 2021 27677.53 27332.28 28022.78 27145.97 28209.09 ## Sep 2021 27748.16 27402.90 28093.41 27216.59 28279.72 ## Oct 2021 27803.53 27458.28 28148.78 27271.97 28335.09 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() # 교육분야 취업자수를 추세(trend)와 계절성(season)으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,3] ~ trend + season, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 3] ~ trend + season, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -106.764 -21.988 6.553 23.192 102.373 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1789.2983 19.0207 94.071 &lt;2e-16 *** ## trend 0.5628 0.1820 3.092 0.0027 ** ## season2 -7.5628 24.5174 -0.308 0.7585 ## season3 6.7493 24.5194 0.275 0.7838 ## season4 19.0615 24.5228 0.777 0.4392 ## season5 32.3737 24.5275 1.320 0.1905 ## season6 41.3108 24.5336 1.684 0.0960 . ## season7 41.2480 24.5410 1.681 0.0966 . ## season8 31.0602 24.5498 1.265 0.2093 ## season9 33.1224 24.5599 1.349 0.1811 ## season10 33.0595 24.5714 1.345 0.1821 ## season11 36.3717 24.5842 1.479 0.1428 ## season12 27.5589 24.5983 1.120 0.2658 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 49.03 on 83 degrees of freedom ## Multiple R-squared: 0.204, Adjusted R-squared: 0.0889 ## F-statistic: 1.772 on 12 and 83 DF, p-value: 0.06634 employee.total.ts.lm %&gt;% forecast() # tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 1843.893 1775.518 1912.268 1738.621 1949.165 ## Feb 2021 1836.893 1768.518 1905.268 1731.621 1942.165 ## Mar 2021 1851.768 1783.393 1920.143 1746.496 1957.040 ## Apr 2021 1864.643 1796.268 1933.018 1759.371 1969.915 ## May 2021 1878.518 1810.143 1946.893 1773.246 1983.790 ## Jun 2021 1888.018 1819.643 1956.393 1782.746 1993.290 ## Jul 2021 1888.518 1820.143 1956.893 1783.246 1993.790 ## Aug 2021 1878.893 1810.518 1947.268 1773.621 1984.165 ## Sep 2021 1881.518 1813.143 1949.893 1776.246 1986.790 ## Oct 2021 1882.018 1813.643 1950.393 1776.746 1987.290 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() 선형 회귀분석을 시행할 때 주의해야 할 점은 잔차가 백색 잡음이어야 한다는 점이다. 잔차의 자가회귀성이 존재하는 경우는 시계열적 특성을 여전히 지니고 있기 때문에 이를 제거할 필요가 있다. 다만 이 예측은 ‘잘못된’ 것은 아니나 예측구간이 커지기 때문에 비효율적 예측 모델이 된다.9 아래의 예에서 보면 전체 학생수를 추세에 의해 선형 회귀분석을 시행한 경우 잔차는 자기 상관성을 지니고 있음을 볼 수 있다. checkresiduals() 함수를 사용하여 확인하는데 plot만 봐도 백색잡음이 아님을 확인할 수 있지만 백색잡음 테스트인 Breusch-Godfrey 테스트 결과(checkresiduals() 함수는 회귀모델에 대해서는 Breusch-Godfrey 테스트를, 나머지는 Ljung-Box 테스트를 시행한다.)의 p-value가 0.05보다 작기 때문에 자기상관성이 존재하여 백색잡음으로 볼 수 없다. checkresiduals(tslm(students.total.ts[,3] ~ trend, data = students.total.ts)) ## ## Breusch-Godfrey test for serial correlation of order up to 5 ## ## data: Residuals from Linear regression model ## LM test = 16.435, df = 5, p-value = 0.005707 checkresiduals(tslm(students.total.ts[,5] ~ + trend, data = students.total.ts)) ## ## Breusch-Godfrey test for serial correlation of order up to 5 ## ## data: Residuals from Linear regression model ## LM test = 16.827, df = 5, p-value = 0.004839 이기준 외, 인구지형변화에 따른 머신러닝 기반 고등교육 계열별 수요예측 모형 개발(2020), 한국교육개발원 https://otexts.com/fppkr/regression-evaluation.html "],["exponential-smoothing-모델.html", "6.3 Exponential Smoothing 모델", " 6.3 Exponential Smoothing 모델 "],["arima-모델.html", "6.4 ARIMA 모델", " 6.4 ARIMA 모델 "],["tbat-모델.html", "6.5 TBAT 모델", " 6.5 TBAT 모델 "],["neural-network-모델.html", "6.6 Neural Network 모델", " 6.6 Neural Network 모델 "],["bootstrapping과-begging-모델.html", "6.7 Bootstrapping과 Begging 모델", " 6.7 Bootstrapping과 Begging 모델 "]]
