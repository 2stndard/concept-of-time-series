[["시계열-데이터-handling.html", "Chapter 4 시계열 데이터 Handling", " Chapter 4 시계열 데이터 Handling 이 장에서는 시계열 데이터를 시간단위로 다루는 방법을 설명할 것이다. 우리는 시간 단위로 기록된 데이터를 항상 다루어왔다. 데이터의 월 평균, 데이터의 전월 대비 변동량 등을 산출하기 위해서는 데이터를 월 단위로 구분하여 평균을 구하거나 전월 데이터를 산출하여 당월 데이터와의 차이를 구하는 등의 작업을 해야한다. R에서 주로 사용하는 data.frame에서는 행렬 인덱스나 조건을 []를 이용하여 전달함으로써 데이터를 검색하고 일부 데이터를 subsetting하거나 dplyr 패키지에서 제공하는 select, filter, group_by, arrange, mutate 등의 함수를 많이 사용하여 작업을 수행할 수 있다. 물론 data.frame에 저장된 시계열 데이터는 dplyr에서 제공하는 함수를 사용할 수 있지만 ts나 xts의 시계열 class의 객체에 대해서는 적용이 되지 않는다. 또한 시계열 데이터는 타 데이터에는 없는 시간적 특성(예를 들어 1분은 60초, 국가마다 년, 월을 표현하하는 방식의 차이, Time Zone)이 있기 때문에 이를 잘 활용하기 위해서는 시계열 데이터의 핸들링 방법을 익혀둘 필요가 있다. 시간을 주로 다루는 ‘lubridate’ 패키지는 시간을 다루기 위한 많은 함수를 제공하는데 이 장에서는 시계열 데이터를 잘 활용하기 위해 lubridate 패키지를 활용하여 시간 인덱스를 다루는 방법에 대해 설명하고자 한다. "],["시계열-데이터-정보-다루기.html", "4.1 시계열 데이터 정보 다루기", " 4.1 시계열 데이터 정보 다루기 시계열 데이터는 년, 월, 일, 시, 분, 초, 타임존 등의 여러 데이터가 결합되어 생성된 시간을 인덱스로 사용하는 데이터이다. 그래서 시계열 데이터를 잘 활용하기 위해서는 시간 인덱스의 여러 요소들을 추출해내야 목적에 맞는 활용이 가능해진다. 함수명 설명 함수명 설명 함수명 설명 year() 연도 추출 hour() 시간 추출 week() 1월1일으로부터의 주수 month() 월 추출 minute() 분 추출 quater(), semester() 1월1일으로부터의 분기수, 반기수 day() 일 추출 second() 초 추출 am(), pm() 오전, 오후의 논리값 wday() 요일 추출 yday() 1월1일으로부터의 날수 leap_year() 윤년 여부의 논리값 library(lubridate) test.time.date &lt;- Sys.time() test.time.char &lt;- as.character(Sys.time()) test.time.xts &lt;- as.xts(Sys.time()) year(test.time.date) ## [1] 2021 month(test.time.char) ## [1] 2 day(test.time.xts) ## [1] 3 yday(test.time.date) ## [1] 34 qday(test.time.char) ## [1] 34 wday(test.time.xts, label = T, abbr = T) ## [1] 수 ## Levels: 일 &lt; 월 &lt; 화 &lt; 수 &lt; 목 &lt; 금 &lt; 토 hour(test.time.date) ## [1] 15 minute(test.time.char) ## [1] 37 second(test.time.xts) ## [1] 49.45878 week(test.time.date) ## [1] 5 quarter(test.time.char, with_year = T) ## [1] 2021.1 semester(test.time.xts, with_year = T) ## [1] 2021.1 am(test.time.date) ## [1] FALSE pm(test.time.char) ## [1] TRUE leap_year(test.time.date) ## [1] FALSE "],["시계열-데이터-연산.html", "4.2 시계열 데이터 연산", " 4.2 시계열 데이터 연산 시간의 연산은 일반적으로 오늘로부터 며칠후, 언제로부터 몇개월전 등과 같은 연산을 의미한다. lubridate 패키지에서는 시간의 연산을 위해 몇개의 함수를 제공하는데 전과 후를 구분하는데에는 수학기호 +와 -를 사용한다. today &lt;- today() today + 100 # 오늘부터 100일 후 ## [1] &quot;2021-05-14&quot; today - months(2) # 오늘부터 2개월 전 ## [1] &quot;2020-12-03&quot; today - years(1) #오늘부터 1년전 ## [1] &quot;2020-02-03&quot; as.Date(&#39;2021-01-01&#39;) - as.Date(&#39;1980-01-01&#39;) # 1980년 1월 1일 이후 날짜 수 ## Time difference of 14976 days "],["시계열-데이터-기간.html", "4.3 시계열 데이터 기간", " 4.3 시계열 데이터 기간 앞선 예에서 1980년 1월 1일부터 오늘까지는 14,976일로 계산되었다. 그러나 우리는 보통 몇년 몇월 몇일로 표현된다. lubridate에서는 이렇게 몇년 몇월 몇일로 변환하는 것을 interval()함수를 사용하여 계산한다. 하지만 바로 계산되는 것은 아니고 interval()함수에 의해 반환되는 값은 interval 클래스의 데이터값으로 시작점으로부터의 초를 기록한다. 이렇게 변환된 interval 객체를 올바르게 표현하기 위해서는 interval 객체를 period 나 duration 클래스 객체로 변환하여야 한다. int &lt;- interval(as.Date(&#39;1980-01-01&#39;), as.Date(&#39;2021-12-31&#39;)) as.period(int) # 년월일 형태로 기간 반환 ## [1] &quot;41y 11m 30d 0H 0M 0S&quot; as.duration(int) # 경과 초 형태로 기간 반환 ## [1] &quot;1325376000s (~42 years)&quot; 4.3.1 data.frame(timetk) 4.3.2 ts, xts "],["시계열-데이터-slicing.html", "4.4 시계열 데이터 Slicing", " 4.4 시계열 데이터 Slicing 4.4.1 data.frame(timetk) 4.4.2 ts, xts "],["시계열-데이터-grouping.html", "4.5 시계열 데이터 Grouping", " 4.5 시계열 데이터 Grouping 4.5.1 data.frame(timetk) 4.5.2 ts, xts "],["시계열-데이터-rolling.html", "4.6 시계열 데이터 Rolling", " 4.6 시계열 데이터 Rolling 4.6.1 data.frame(timetk) 4.6.2 ts, xts "]]
