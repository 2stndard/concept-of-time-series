[["시계열-데이터-타입-및-import.html", "Chapter 2 시계열 데이터 타입 및 Import", " Chapter 2 시계열 데이터 타입 및 Import 시계열 데이터는 시간을 인덱스로 사용해야하기 때문에 반드시 시간형 데이터 클래스가 존재해야한다. R에서는 시간을 인덱스로 허용하는 데이터 클래스를 몇가지 제공하고 있는데 그 클래스에 따라 데이터 핸들링 함수, ploting 함수, 모델 생성 함수 등의 사용법이 다르기 때문에 주의깊게 설정해야 한다. 또한 각각의 데이터 클래스들이 장단점을 가지기 때문에 데이터 간의 변환을 통해 사용해야할 경우도 있다. 이 장에서는 R에서 제공하는 시계열 객체, 패키지에서 제공하는 시계열 클래스를 소개하고 각각의 특징을 설명한다. "],["날짜시간-데이터-클래스.html", "2.1 날짜/시간 데이터 클래스", " 2.1 날짜/시간 데이터 클래스 시계열 클래스에는 반드시 시간을 표기하는 데이터가 인덱스로 사용되어야 하기 때문에 인덱스로 사용되어야 하는 시간 데이터 클래스가 필요하다. R에는 시간을 표기하는 다양한 데이터 클래스가 존재한다. 2.1.1 Date class R base에서 기본적으로 제공하는 데이터 클래스로 1970년 이후의 달력상의 날짜 수를 기록하는 데이터 타입으로 양수일 경우 1970년 이후의 날짜이며 음수인 경우 1970년 이전의 날짜를 표시한다. Date class는 실제 R내부에 저장시에는 정수형태로 저장됨. Date 객체의 기본적인 표현 방식은 ‘yyyy-mm-dd’ 형태로 표현된다. as.Date(&#39;2021-01-31&#39;) #### character를 Date class로 변환 ## [1] &quot;2021-01-31&quot; unclass(as.Date(&#39;2021-01-31&#39;)) ### Date class를 해제하면 정수형 ## [1] 18658 library(zoo) as.Date(10000) # zoo 패키지에서 as.Date를 overriding하므로 zoo 패키지가 없으면 error ## [1] &quot;1997-05-19&quot; Sys.Date() # today ## [1] &quot;2021-02-19&quot; Sys.Date() + 10 # 오늘로부터 10일 후 ## [1] &quot;2021-03-01&quot; 2.1.2 POSIXct, POSIXlt data class Date 데이터 클래스는 1970년 이후 날짜를 기록하는 데이터 클래스이지만 POSIXct 와 POSIXlt 데이터 클래스는 1970년 이후 시간을 초단위로 기록하는 데이터 클래스이다. POSIXct는 정수형태로 기록되는 데이터 클래스이고 POSIXlt는 리스트형태로 기록되는 데이터 클래스이다. POSIXlt는 1900년 이후로 계산되어 리스트가 만들어 진다. as.POSIXct(&#39;2021-01-31 12:34:56&#39;) ### character를 POSIXct class 로 변환 ## [1] &quot;2021-01-31 12:34:56 KST&quot; unclass(as.POSIXct(&#39;2021-01-31 12:34:55&#39;)) ### POSIXct를 해제하면 정수 ## [1] 1612064095 ## attr(,&quot;tzone&quot;) ## [1] &quot;&quot; as.POSIXlt(&#39;2021-01-31 12:34:56&#39;) ### character를 POSIXlt class 로 변환 ## [1] &quot;2021-01-31 12:34:56 KST&quot; unclass(as.POSIXlt(&#39;2021-12-31 12:34:56&#39;)) ### POSIXlt를 해제하면 list ## $sec ## [1] 56 ## ## $min ## [1] 34 ## ## $hour ## [1] 12 ## ## $mday ## [1] 31 ## ## $mon ## [1] 11 ## ## $year ## [1] 121 ## ## $wday ## [1] 5 ## ## $yday ## [1] 364 ## ## $isdst ## [1] 0 ## ## $zone ## [1] &quot;KST&quot; ## ## $gmtoff ## [1] NA as.POSIXlt(&#39;2021-12-31 12:34:56&#39;)$year ### POSIXlt에서 1900년 이후 연도를 추출 ## [1] 121 2.1.3 yearmon, yearqtr class yearmon과 yearqtr 클래스는 모두 zoo 패키지에서 제공하는 클래스로 yearmon 클래스는 월별 데이터를 표현하는 클래스이고 yearqtr는 분기 데이터를 표현하는 클래스이다. yearmon 클래스는 1월을 0으로 2월을 1/12 = 0.083, 12월을 11/12 = 0.917 으로 표기하고 yearqtr 클래스는 각 분기마다 0.25씩 더해서 저장되지만 표현될 때는 보기좋은 시간형태로 표현된다. library(zoo) as.yearmon(&quot;2007-02&quot;) ### character를 yearmon class로 변환 ## [1] &quot;2 2007&quot; unclass(as.yearmon(&quot;2007-02&quot;)) ### yearmon class를 해제하면 double ## [1] 2007.083 unclass(as.yearmon(&quot;2007-02-01&quot;)) ### 날짜가 있어도 yearmon은 년, 월까지만 인식 ## [1] 2007.083 as.yearqtr(&quot;2007-01&quot;) ### character를 yearqtr class로 변환(1분기) ## [1] &quot;2007 Q1&quot; as.yearqtr(&quot;2007-04&quot;) ### character를 yearqtr class로 변환(4분기) ## [1] &quot;2007 Q4&quot; unclass(as.yearqtr(&quot;2007-01&quot;)) ### yearqtr class를 해제하면 double ## [1] 2007 unclass(as.yearqtr(&quot;2007-04&quot;)) ### yearqtr class를 해제하면 double ## [1] 2007.75 2.1.4 날짜, 시간 포맷 날짜와 시간을 표현하는 방법은 매우 여러가지가 있다. R에서는 format 함수의 표준 코드를 사용하여 날짜, 시간의 표현 방법을 다양하게 변경할 수 있다. 또한 R의 지역설정에 따라 표현되는 날짜 형태도 다른데 우리나라 지역설정으로는 %B, %b는 ‘January,’ ‘Jan’ 이 아닌 ’1월’로 표기된다. standard date format codes Code Value Example %d 월의 날짜(정수) 23 %m 월(정수) 12 %B 전체 월 이름 January %b 축약형 월 이름 Jan %Y 4자리 연도 2010 %y 2자리 연도 10 as.Date(&#39;01/12/2010&#39;, format = &#39;%d/%m/%Y&#39;) ### %d/%m/%Y의 형태로 표기된 character를 date class로 변환 ## [1] &quot;2010-12-01&quot; as.Date(&#39;01jan21&#39;, format = &#39;%d%b%y&#39;) ### %d%b%y의 형태로 표기된 character를 date class로 변환 ## [1] NA Sys.setlocale(&quot;LC_ALL&quot;, &quot;English&quot;) ### 영국의 형태로 표기된 date class로 변환 ## [1] &quot;LC_COLLATE=English_United States.1252;LC_CTYPE=English_United States.1252;LC_MONETARY=English_United States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252&quot; as.Date(&#39;01jan21&#39;, format = &#39;%d%b%y&#39;) ## [1] &quot;2021-01-01&quot; Sys.setlocale(&quot;LC_ALL&quot;, &quot;Korean&quot;) ### 한국의 형태로 표기된 date class로 변환 ## [1] &quot;LC_COLLATE=Korean_Korea.949;LC_CTYPE=Korean_Korea.949;LC_MONETARY=Korean_Korea.949;LC_NUMERIC=C;LC_TIME=Korean_Korea.949&quot; as.Date(&#39;011월21&#39;, format = &#39;%d%b%y&#39;) ## [1] &quot;2021-01-01&quot; "],["시계열-패키지-및-데이터-객체object.html", "2.2 시계열 패키지 및 데이터 객체(Object)", " 2.2 시계열 패키지 및 데이터 객체(Object) R에서는 일반적으로 data.frame 객체로 데이터를 저장하는 경우가 많은데 시계열 객체는 시간 인덱스를 기반으로 검색, 분할, 집계, 병합과 같은 데이터 핸들링이 이루어지기 때문에 data.frame에서 효과적으로 작동하지 않음. 따라서 R에서는 시간 인덱스를 기반으로 데이터를 처리하기 위한 특별한 데이터 객체를 제공하고 있다.2 R에서 많이 사용하는 시계열 객체는 대부분 패키지에서 제공하는데 많이 사용되는 시계열 패키지 및 데이터 타입은 다음과 같다. 2.2.1 ts ts 객체(Object)는 R에서 가장 기본적으로 활용되는 시계열 데이터 타입임. ts 객체는 ‘stats’ 패키지를 로드해야 사용할 수 있지만 R이 실행될 때 기본적으로 로드되는 패키지이기 때문에 특별한 패키지를 로드하지 않고 바로 활용할 수 있다. 또한 stats 패키지에 포함된 다양한 시계열 데이터 처리 함수를 사용할 수 있어 많이 사용된다.3 ts 데이터 객체 생성 (R Core Team, n.d.) ts(1:10, frequency = 4, start = c(1959, 2)) ### 1959년 2분기부터 1년을 4주기로 데이터를 생성하는 ts object ## Qtr1 Qtr2 Qtr3 Qtr4 ## 1959 1 2 3 ## 1960 4 5 6 7 ## 1961 8 9 10 2.2.2 zoo zoo 객체는 시간의 순서로 정렬된 S3 클래스의 데이터 타입으로 수치 벡터나 매트릭스와 팩터의 시계열 데이터를 표현한다. zoo는 특정한 인덱스 / 날짜 / 시간 클래스의 독립성과 ts 및 기본 R과의 일관성을 확보하기 위한 표준 제네릭의 확장 방법을 제공하는 것이다.4 zoo 패키지 설치 if(!require(zoo)) { install.packages(&#39;zoo&#39;) library(zoo) } zoo 데이터 객체 생성 zoo(rnorm(5), as.Date(&quot;2008-08-01&quot;) + 0:4) ### 2008년 8월 1일 부터 5일치 데이터를 가지는 zoo object 생성 ## 2008-08-01 2008-08-02 2008-08-03 2008-08-04 2008-08-05 ## -0.6568968 1.1227166 -0.8874551 0.7828978 1.8756458 2.2.3 xts xts는 extensible time-series의 준말로 ‘xts’ 패키지를 로드해야 활용할 수 있는 데이터 객체이다. 앞서 기술된 zoo 데이터 타입에 종속된 데이터 타입으로 zoo를 확장하여 다양한 시간 기반 데이터 클래스를 균일하게 처리 할 수 있는 데이터 객체이다.5 xts 패키지 설치 if(!require(xts)) { install.packages(&#39;xts&#39;) library(xts) } xts 데이터 객체 생성 xts(rnorm(5), as.Date(&quot;2008-08-01&quot;) + 0:4) ### 2008년 8월 1일 부터 5일치 데이터를 가지는 xts object 생성 ## [,1] ## 2008-08-01 0.01512061 ## 2008-08-02 0.11859195 ## 2008-08-03 -0.23140078 ## 2008-08-04 0.04443974 ## 2008-08-05 0.79058597 as.xts(rnorm(5), as.Date(&quot;2008-08-01&quot;) + 0:4) ### 2008년 8월 1일 부터 5일치 데이터를 가지는 xts object 변환 ## [,1] ## 2008-08-01 -2.1039656 ## 2008-08-02 -0.9481693 ## 2008-08-03 -0.7676406 ## 2008-08-04 0.1069898 ## 2008-08-05 1.0363516 xts()와 as.xts()의 차이 xts()는 xts 객체를 생성하는 함수이나 as.xts()는 timeSeries, ts, irts, fts, matrix, data.frame, zoo 객체를 xts객체로 변환하는 함수이다.6 다음과 같은 차이가 발생한다. ts &lt;- ts(1:10, frequency = 4, start = c(1959, 2)) xts(ts) ### xts를 생성해야하나 인덱스가 정해지지 않아 에러 ## Error in xts(ts): order.by requires an appropriate time-based object as.xts(ts) ### ts object의 특성을 해석하여 xts로 변환 ## [,1] ## 1959 Q2 1 ## 1959 Q3 2 ## 1959 Q4 3 ## 1960 Q1 4 ## 1960 Q2 5 ## 1960 Q3 6 ## 1960 Q4 7 ## 1961 Q1 8 ## 1961 Q2 9 ## 1961 Q3 10 ts, zoo, xts는 모두 시계열 데이터를 다루는 객체이지만 xts(zoo의 확장판)가 보다 유연한 함수가 있는데 최근에는 ts 객체에도 동일하게 적용할 수 있는 함수가 제공되고 있다. 또한 xts 매뉴얼에 의하면 as.xts와 reclass를 활용하는 것이 xts를 사용하는 것보다 이익이 있다고 명기하고 있다.7 head(ts) # 시계열 데이터 형태로 보이지 않음 ## [1] 1 2 3 4 5 6 head(as.xts(ts)) # 시계열 형태로 보임 ## [,1] ## 1959 Q2 1 ## 1959 Q3 2 ## 1959 Q4 3 ## 1960 Q1 4 ## 1960 Q2 5 ## 1960 Q3 6 2.2.4 tsibble R에서는 tidyverse 작업방법을 준용하면서 쉽게 작업할 수 있는 시계열 데이터 객체, 분석 방법 등을 종합적으로 제공하는 방법을 제공한다. 이 방법 중 하나가 tidyverts 패밀리 패키지들을 사용하는 것이다. tidyverts는 tidyverse처럼 단독으로 제공되는 패키지는 아니지만 시계열 데이터를 저장할 수 있는 객체 패키지인 tsibble, 시계열 예측을 위한 fable, 시계열 특성 추출과 통계를 위한 feast, 최근에 페이스 북에서 개발된 prophet 모델을 사용하기 위한 fable.prophet 패키지 등이 포함한다.8 tsibble 객체는 tsibble 패키지를 통해 제공되는 시계열 데이터 객체로써 tidy 데이터 원칙9을 준용하여 시계열 데이터를 다룰수 있도록 한 tibble 객체의 시계열용 객체이다. tsibble 객체는 tibble에서 각 관찰치(objervation)을 고유한 식별할 수 있는 key에 추가적으로 시간의 순서가 지정되는 index를 필요로 한다. 즉 tibble 객체에서는 key로 특정 관찰치를 식별할 수 있지만 tsibble에서는 같은 key를 가진 시간(index)가 다른 관찰치가 존재하고 key와 index를 사용하여 고유한(unique) 관찰치를 식별하게 된다.10 tsibble 패키지 설치 tsibble 객체를 사용하기 위해서는 우선 tsibble 패키지를 설치하고 로딩해야한다. 다음과 같이 설치는 install.package 함수를 사용하고 로딩은 library 함수를 사용한다. if(!require(tsibble)) { install.packages(&#39;tsibble&#39;) library(tsibble) } tsibble 객체 생성 tsibble 패키지를 로딩한 후에 tsibble 객체를 생성할 수 있다. tsibble 객체를 생성하는 방법은 tsibble 함수를 사용해서 직접 tsibble 객체를 생성할 수도 있고 data.frame으로 생성된 객체를 as.tsibble 함수를 사용해 tsibble 객체로 변환하는 방법이 있다. 이 중 data.frame을 tsibble 객체로 변환하는 방법은 다음과 같다. library(dplyr) x &lt;- data.frame(date = as.Date(&#39;2008-01-01&#39;) + 0:9, id = 1:10, x1 = rnorm(10), x2= rep(&#39;a&#39;, 10)) ### code 1 as_tsibble(x, key = id, index = date) ### code 2 ## # A tsibble: 10 x 4 [1D] ## # Key: id [10] ## date id x1 x2 ## &lt;date&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 2008-01-01 1 -0.474 a ## 2 2008-01-02 2 0.335 a ## 3 2008-01-03 3 -1.08 a ## 4 2008-01-04 4 0.0736 a ## 5 2008-01-05 5 -0.905 a ## 6 2008-01-06 6 1.43 a ## 7 2008-01-07 7 0.262 a ## 8 2008-01-08 8 -0.533 a ## 9 2008-01-09 9 0.417 a ## 10 2008-01-10 10 -1.79 a as_tsibble(x, index = date) ### code 3 ## # A tsibble: 10 x 4 [1D] ## date id x1 x2 ## &lt;date&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 2008-01-01 1 -0.474 a ## 2 2008-01-02 2 0.335 a ## 3 2008-01-03 3 -1.08 a ## 4 2008-01-04 4 0.0736 a ## 5 2008-01-05 5 -0.905 a ## 6 2008-01-06 6 1.43 a ## 7 2008-01-07 7 0.262 a ## 8 2008-01-08 8 -0.533 a ## 9 2008-01-09 9 0.417 a ## 10 2008-01-10 10 -1.79 a 코드설명 code 1 : tsibble로 변환할 data.frame x를생성한다. date 컬럼은 ‘2008년 1월 1일’(as.Data(‘2008-01-01’))부터 10일후 까지( + 0:9)이고 id 컬럼은 1부터 10까지(1:10), x1은 정규분포 랜덤값 10개(rnorm(10)), x2는 ‘a’(rep(‘a,’ 10))로 채운다 code 2 : as.tsibble 함수로 x를 tsibble로 변환하는데 key값은 id(key = id), index 값은 date(index = date)로 설정한다. code 3 : as.tsibble 함수로 x를 tsibble로 변환하는데 key값은 생략하고, index 값은 date(index = date)로 설정한다. 2.2.5 modeltime ‘tidymodel’과 같이 사용이 가능한 시계열 예측 프레임워크이다. modeltime 패키지에서 제공하는 시계열 모델은 ARIMA, Exponential Smoothing 외에도 ’forecast’ 패키지와 ‘prophet’ 패키지에서 제공하는 추가적인 시계열 모델을 제공함.11 이 패키지는 ’tidymodel’과 같이 사용하는 기본 사상으로 특별한 시계열 데이터 타입을 제공하지 않고 tibble 데이터 타입을 사용할 수 있다는 장점이 있음. modeltime 패키지 설치 if(!require(modeltime)) { install.packages(&#39;modeltime&#39;) library(modeltime) } Eric Zivo, Working with Financial Time Series Data in R, 2014, https://faculty.washington.edu/ezivot/econ424/Working%20with%20Time%20Series%20Data%20in%20R.pdf ts, R document , https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/ts, 2021.1.31 https://cran.r-project.org/web/packages/zoo/zoo.pdf https://cran.r-project.org/web/packages/xts/xts.pdf https://www.rdocumentation.org/packages/xts/versions/0.12.1/topics/as.xts.methods https://cran.r-project.org/web/packages/xts/xts.pdf https://tidyverts.org/ https://tidyr.tidyverse.org/articles/tidy-data.html https://github.com/tidyverts/tsibble https://cran.r-project.org/web/packages/modeltime/index.html "],["시계열-데이터-import의-방법.html", "2.3 시계열 데이터 Import의 방법", " 2.3 시계열 데이터 Import의 방법 시계열(Time Series) 데이터를 R에서 직접 생성할 수도 있으나 대부분의 경우는 다양한 파일 포맷(Excel, CSV, SPSS 등)으로 저장된 파일에서 읽어들이는 방법이 일반적이다. 본 문서에서는 다양한 파일 포맷 중 Excel과 CSV파일에서 시계열 데이터를 읽어들여 활용하는 방법을 설명한다. 2.3.1 파일에서 시계열 데이터로 읽어들이는 방법 데이터를 파일에서 읽어들여 data.frame에 저장 후 저장된 data.frame을 시계열 데이터 타입으로 변환한다. 다음 예제에서 사용하는 자료는 연도별 학교급별 학생수 자료로 한국교육개발원 교육통계 서비스 홈페이지12에서 다운로드하였으며 연도별 시계열 데이터 샘플로 사용한다. read_excel 함수를 통해 excel 파일을 바로 읽어들일 수 있다. 아래의 예제를 실행시 warning이 발생하는 이유는 read_excel 함수는 데이터를 로드할 때 데이터의 형태에 따라 적절한 데이터 타입을 매칭하는데 read_excel 함수에서 추천된 데이터 타입과 지정된 데이터 타입이 다를 경우 발생되는 warning이다. library(readxl) student.from.excel &lt;- student_excel &lt;- read_excel(&quot;./students.xlsx&quot;, skip = 16, na = &#39;-&#39;, sheet = 1, col_types = c(&#39;text&#39;, &#39;text&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;, &#39;numeric&#39;)) # 엑셀 파일로부터 데이터를 읽어오는데 데이터를 정확히 읽기 위해 데이터 타입을 정해줌 # Look at the first few lines of mydata head(student.from.excel) # 데이터 확인 ## # A tibble: 6 x 18 ## 연도 지역규모 학생수계 유치원 초등학교 중학교 고등학교계 일반계고 전문계고 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1999 특별/광역시~ 4097895 227758 1807584 9.15e5 1121998 742693 379305 ## 2 1999 시 3110148 204246 1437516 6.73e5 783207 503531 279676 ## 3 1999 읍지역 685091 43160 303702 1.39e5 197522 94479 103043 ## 4 1999 면지역 639421 48456 319006 1.44e5 126273 50558 75715 ## 5 1999 특수지역 125803 10546 67729 2.54e4 22140 8128 14012 ## 6 1999 계 8658358 534166 3935537 1.90e6 2251140 1399389 851751 ## # ... with 9 more variables: 일반고 &lt;dbl&gt;, 특목고 &lt;dbl&gt;, 특성화고 &lt;dbl&gt;, ## # 자율고 &lt;dbl&gt;, 특수학교 &lt;dbl&gt;, 공민학교 &lt;dbl&gt;, 고등공민 &lt;dbl&gt;, ## # 고등기술학교 &lt;dbl&gt;, 각종학교 &lt;dbl&gt; read.csv 함수를 통해 csv파일을 바로 읽음. 이 경우 문제점은 천단위 콤마(Big mark)가 존재하면 숫자로 인식하지 못하고 문자로 인식한다는 점이다. 이를 위해 csv 파일에서 콤마를 제거하거나 문자로 읽어들인 후 콤마를 제거하거나 해야 한다. students &lt;- read.csv(&#39;./students.csv&#39;, skip = 16, header = TRUE, na = &#39;-&#39;, strip.white = TRUE, stringsAsFactors = TRUE) head(student.from.excel) # 데이터 확인 ## # A tibble: 6 x 18 ## 연도 지역규모 학생수계 유치원 초등학교 중학교 고등학교계 일반계고 전문계고 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1999 특별/광역시~ 4097895 227758 1807584 9.15e5 1121998 742693 379305 ## 2 1999 시 3110148 204246 1437516 6.73e5 783207 503531 279676 ## 3 1999 읍지역 685091 43160 303702 1.39e5 197522 94479 103043 ## 4 1999 면지역 639421 48456 319006 1.44e5 126273 50558 75715 ## 5 1999 특수지역 125803 10546 67729 2.54e4 22140 8128 14012 ## 6 1999 계 8658358 534166 3935537 1.90e6 2251140 1399389 851751 ## # ... with 9 more variables: 일반고 &lt;dbl&gt;, 특목고 &lt;dbl&gt;, 특성화고 &lt;dbl&gt;, ## # 자율고 &lt;dbl&gt;, 특수학교 &lt;dbl&gt;, 공민학교 &lt;dbl&gt;, 고등공민 &lt;dbl&gt;, ## # 고등기술학교 &lt;dbl&gt;, 각종학교 &lt;dbl&gt; students[, 3:18] &lt;- apply(students[, 3:18], 2, function(y) as.numeric(gsub(&quot;,&quot;, &quot;&quot;, y))) # 콤마 제거 head(students) ## 연도 지역규모 학생수계 유치원 초등학교 중학교 고등학교계 일반계고 ## 1 1999 특별/광역시 4097895 227758 1807584 915139 1121998 742693 ## 2 1999 시 3110148 204246 1437516 673197 783207 503531 ## 3 1999 읍지역 685091 43160 303702 139420 197522 94479 ## 4 1999 면지역 639421 48456 319006 143812 126273 50558 ## 5 1999 특수지역 125803 10546 67729 25388 22140 8128 ## 6 1999 계 8658358 534166 3935537 1896956 2251140 1399389 ## 전문계고 일반고 특목고 특성화고 자율고 특수학교 공민학교 고등공민 ## 1 379305 NA NA NA NA 12217 150 342 ## 2 279676 NA NA NA NA 8375 0 169 ## 3 103043 NA NA NA NA 1287 0 0 ## 4 75715 NA NA NA NA 1611 0 0 ## 5 14012 NA NA NA NA 0 0 0 ## 6 851751 NA NA NA NA 23490 150 511 ## 고등기술학교 각종학교 ## 1 6934 5773 ## 2 1382 2056 ## 3 0 0 ## 4 83 180 ## 5 0 0 ## 6 8399 8009 class(students) ## [1] &quot;data.frame&quot; students.total &lt;- students %&gt;% filter(지역규모 == &#39;계&#39;) 읽어 들인 후에는 시계열 데이터로 변환하는 과정을 거쳐야 함. 여기서는 csv 파일에서 읽어들인 데이터를 변환한다. library(dplyr) students.total.ts &lt;- students %&gt;% filter(지역규모 == &#39;계&#39;) %&gt;% ts(start = 1999, frequency = 1) # ts 객체로 변환 class(students.total.ts) ## [1] &quot;mts&quot; &quot;ts&quot; &quot;matrix&quot; students.total.xts &lt;- students %&gt;% filter(지역규모 == &#39;계&#39;) students.total.xts &lt;- as.xts(students.total.xts, order.by = as.Date(paste0(students.total.xts[,1], &#39;-01-01&#39;), format = &#39;%Y-%m-%d&#39;)) # xts 객체로 변환 class(students.total.xts) ## [1] &quot;xts&quot; &quot;zoo&quot; glimpse(students.total.xts) ## An &#39;xts&#39; object on 1999-01-01/2020-01-01 containing: ## Data: chr [1:22, 1:18] &quot;1999&quot; &quot;2000&quot; &quot;2001&quot; &quot;2002&quot; &quot;2003&quot; &quot;2004&quot; &quot;2005&quot; &quot;2006&quot; ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : NULL ## ..$ : chr [1:18] &quot;연도&quot; &quot;지역규모&quot; &quot;학생수계&quot; &quot;유치원&quot; ... ## Indexed by objects of class: [Date] TZ: UTC ## xts Attributes: ## NULL 이 과정에서 주의해야할 점은 xts 객체로 변환되는 경우 Numeric 값이 모두 Character값으로 변환된다는 점이다. xts 객체는 기본적으로 matrix를 기반으로 하기 때문에 데이터 프레임을 모두 변환하는 경우 Character 컬럼이 있으면 모두 Character로 변환된다. 따라서 Character 컬럼을 제외해 전체 컬럼을 모두 Numeric으로 맞추면 정상적으로 데이터가 변환된다. students.total.xts &lt;- students %&gt;% filter(지역규모 == &#39;계&#39;) %&gt;% select(-지역규모) students.total.xts &lt;- as.xts(students.total.xts, order.by = as.Date(paste0(students.total.xts[,1], &#39;-01-01&#39;), format = &#39;%Y-%m-%d&#39;)) glimpse(students.total.xts) ## An &#39;xts&#39; object on 1999-01-01/2020-01-01 containing: ## Data: num [1:22, 1:17] 1999 2000 2001 2002 2003 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : NULL ## ..$ : chr [1:17] &quot;연도&quot; &quot;학생수계&quot; &quot;유치원&quot; &quot;초등학교&quot; ... ## Indexed by objects of class: [Date] TZ: UTC ## xts Attributes: ## NULL tsibble 데이터로는 다음과 같이 변환한다. students.tsibble &lt;- as_tsibble(students, key = 지역규모, index = 연도) 2.3.2 직접 시계열 데이터 타입으로 읽어들이는 방법 xts 패키지와 modeltime 패키지는 외부 데이터를 직접 읽어 올 수 있는 방법 제공하지 않는다. xts의 경우는 read.ts(tseries 패키지 필요)나 read.zoo 함수를 이용해 읽어들인 시계열 객체를 as.xts 함수를 이용하여 xts 객체로 변환하고 modeltime은 tidymodel 객체를 변환하여 사용하는 것이 일반적이다. ts 객체를 읽어올때 주의할 점은 ts 객체는 파일에 기록된 시간 인덱스를 직접 시간인덱스로 사용할 수 없고 read.ts 함수 호출시 시계열 시작점과 간격을 지정함으로써 일정한 간격의 시계열 데이터를 생성해야 한다는 점이다. 시작점부터 일정한 간격으로 모든 데이터가 기록된 경우는 문제가 없지만 일부 데이터가 결측되는 경우 정확히 읽어들일 수 없다. library(tseries) df &lt;- data.frame(date = seq(as.Date(&#39;2010-01-01&#39;), length.out = 30, by = &#39;months&#39;), value1 = rnorm(30), value2 = rnorm(30)) write.csv(df[,-1], &quot;testfile_readts.csv&quot;, row.names = F) read.ts(&quot;testfile_readts.csv&quot;, header = TRUE, sep = &#39;,&#39;, start = c(2010, 1), frequency = 12) ## value1 value2 ## Jan 2010 0.5297059 1.20293721 ## Feb 2010 -0.9183523 -0.65506473 ## Mar 2010 0.8369058 0.16468872 ## Apr 2010 -0.4529064 0.53511545 ## May 2010 -1.2205304 -0.42875836 ## Jun 2010 -1.3337458 1.75457294 ## Jul 2010 -1.5320336 -0.56882231 ## Aug 2010 -0.2098366 1.01067302 ## Sep 2010 2.3876502 1.05347633 ## Oct 2010 -0.6892590 1.48317955 ## Nov 2010 1.2178977 -0.49009931 ## Dec 2010 0.5004068 -1.31696488 ## Jan 2011 1.0682072 2.04761965 ## Feb 2011 0.5508762 -1.49532867 ## Mar 2011 0.1944392 -0.01856636 ## Apr 2011 -0.7514701 -1.96710803 ## May 2011 0.6140516 -1.38876308 ## Jun 2011 -0.7102615 -0.55306102 ## Jul 2011 -1.0223217 1.34041182 ## Aug 2011 1.7329350 0.25606147 ## Sep 2011 2.1006378 -0.07375387 ## Oct 2011 -0.1471370 0.85663846 ## Nov 2011 1.5354548 0.33917513 ## Dec 2011 0.7825492 -0.65639978 ## Jan 2012 0.6656883 0.41606709 ## Feb 2012 0.4109936 0.55981205 ## Mar 2012 -0.3913565 -1.44110484 ## Apr 2012 0.6917451 0.48833715 ## May 2012 1.5487088 0.40020768 ## Jun 2012 0.3854206 0.28866284 읽어들일 파일에 시간이 기재되어 있는 경우는 zoo 패키지의 read.zoo 함수를 이용하여 zoo 객체로 읽어들인 후 이 객체를 xts 객체로 변환하여 활용하는 방법을 활용할 수 있다. read.ts에 비해 read.zoo는 지정된 주기의 비일정한 시계열 데이터 타입을 불러 들일 수 있다는 장점이 있다. 예를 들어 매일 기록되는 데이터의 경우 read.ts는 중간에 빠지는 날이 없이 지정된 기간동안 매일 기록된 데이터를 가져오지만 read.zoo는 기본적으로 매일 기록된 데이터를 가져온다하더라도 중간중간 빠진 날을 인정하고 가져올 수 있는 방법이다. write.csv(df, &quot;testfile_readts.csv&quot;, row.names = F) zoo.class &lt;- read.zoo(&quot;testfile_readts.csv&quot;, sep = &#39;,&#39;, index.column = 1, format = &#39;%Y-%m-%d&#39;, header = TRUE) class(zoo.class) ## [1] &quot;zoo&quot; xts.class &lt;- as.xts(zoo.class) class(xts.class) ## [1] &quot;xts&quot; &quot;zoo&quot; head(xts.class) ## value1 value2 ## 2010-01-01 0.5297059 1.2029372 ## 2010-02-01 -0.9183523 -0.6550647 ## 2010-03-01 0.8369058 0.1646887 ## 2010-04-01 -0.4529064 0.5351154 ## 2010-05-01 -1.2205304 -0.4287584 ## 2010-06-01 -1.3337458 1.7545729 https://kess.kedi.re.kr/userfile/6711778 "],["실습-데이터-생성.html", "2.4 실습 데이터 생성", " 2.4 실습 데이터 생성 다음 장부터의 예제 코드에서 사용할 데이터 셋은 연별 데이터, 월별 데이터, 일별 데이터의 세가지이다. 연별 데이터는 교육통계 서비스 홈페이지에서 다운받은 연도별 학교급별 학생수 데이터이고 월별 데이터는 통계청 KOSIS 홈페이지의 경제활동인구조사의 산업별 취업자수에서 다운받은 월간 취업자수와 교육서비스업 취업자수, 일별 데이터는 통계청 KOSIS 홈페이지의 코로나 확진자수 데이터이다. 앞서 생성한 연별 데이터외에 월별 데이터와 일별 데이터는 다음과 같이 생성하는데 뒤에서 실습을위해 data.frame, ts, xts, tsibble 객체로 각각 생성한다. 2.4.1 월별 데이터 - 경제활동 인구조사 산업별 취업자수 경제활동 인구조사 취업자수는 통계청 KOSIS 홈페이지에서 다운로드13받을 수 있는데 ’국내통계 &gt; 노동 &gt; 경제활동인구조사 &gt; 취업자 &gt; 산업별 취업자’에서 시점을 2013.1월부터 2020.12월까지, 산업구분을 전체 계와 교육서비스업으로 설정 후 행렬전환 기능을 사용하여 행에 기간, 열에 산업을 설정한 후 다운로드 받았는데 필자의 github에서 다운받을 수 있다.(csv 파일을 다운로드받는 방법은 다음의 사이트를 참조하길 바란다. https://technical-support.tistory.com/54) employees &lt;- read.csv(&#39;./산업별_취업자_20210206234505.csv&#39;, header = TRUE, na = &#39;-&#39;, strip.white = TRUE, stringsAsFactors = TRUE) colnames(employees) &lt;- c(&#39;time&#39;, &#39;total&#39;, &#39;employees.edu&#39;) employees$time &lt;- as.Date(paste0(employees$time, &#39;. 01&#39;), format = &#39;%Y. %m. %d&#39;) employees.ts &lt;- ts(employees, start = c(2013, 01), frequency = 12) employees.xts &lt;- xts(employees[,2:3], order.by = employees[,1]) employees.tsibble &lt;- as_tsibble(employees, index = time) 2.4.2 일별 데이터 - 코로나 확진자 수 일별 코로나 확진자수는 통계청 KOSIS 홈페이지에서 다운로드14받았고 필자의 github에서 다운로드 받을수 있다. 전체 데이터 중 연령별 데이터만 필터하였고 spread() 함수를 사용하여 긴(long) 형태의 데이터 프레임을 넓은(wide) 형태의 데이터프레임으로 변환하였다. covid19 &lt;- read.csv(&#39;./covid19.csv&#39;, header = TRUE, na = &#39;-&#39;, strip.white = TRUE, stringsAsFactors = TRUE) colnames(covid19) &lt;- c(&#39;category&#39;, &#39;status&#39;, &#39;date&#39;, &#39;value&#39;) covid19 &lt;- covid19[, c(3, 1, 2, 4)] covid19$date &lt;- as.Date(covid19$date, &quot;%Y. %m. %d&quot;) covid19.by.age &lt;- covid19 %&gt;% filter(grepl(&#39;세&#39;, category)) %&gt;% filter(category != &#39;세종&#39;) covid19.by.age$value &lt;- ifelse(is.na(covid19.by.age$value), 0, covid19.by.age$value) wide.covid19.by.age &lt;- tidyr::spread(covid19.by.age, category, value) wide.covid19.by.age.ts = ts(wide.covid19.by.age[, 2:10], frequency = 365) wide.covid19.by.age.xts &lt;- as.xts(wide.covid19.by.age[, 3:10], order.by = wide.covid19.by.age$date) wide.covid19.by.age.tsibble &lt;- as_tsibble(wide.covid19.by.age, index = date) https://kosis.kr/statisticsList/statisticsListIndex.do?parentId=D.1&amp;menuId=M_01_01&amp;vwcd=MT_ZTITLE&amp;parmTabId=M_01_01&amp;entrType=btn#content-group https://kosis.kr/covid/covid_index.do "]]
