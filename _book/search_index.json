[["시계열-forecasting-part-ii-시계열-모델링-알고리즘.html", "Chapter 6 시계열 forecasting Part II - 시계열 모델링 알고리즘", " Chapter 6 시계열 forecasting Part II - 시계열 모델링 알고리즘 A future like the past: 시계열 예측의 가장 기본적인 가정은 과거의 패턴은 미래에도 계속된다는 가정이다. 이 가정은 단기 미래에서는 데이터가 발생되는 환경이 현재와 유사하기 때문에 불확실성이 작지만 장기 미래로 갈수록 데이터가 발생되는 환경이 달라질 가능성이 높아지면서 예측 데이터에 대한 불확실성이 높아질 수 밖에 없다. 이러한 이유때문에 시계열 예측은 외부 충격이나 원인모를 이유에 의한 갑작스런 데이터 흐름 변화를 예측해낼 수 없다는 한계를 지닌다. 그런 지점을 전환점(Turning Point)라고 한다. 이 전환점은 시계열 분석에 있어 중요한 부분이지만 전환점을 예측하기 위해서는 전통적인 시계열 분석 기법보다는 다른 기법을 활용해야 할 수 있다.2 본 장에서는 세가지 데이터를 이용하여 알고리즘을 적용한다. 첫번째 데이터는 교육통계홈페이지에서 다운로드 받은 students 데이터로 1999년부터 2020년까지의 전국 학생수 데이터이고, 두번째 데이터는 KOSIS에서 다운로드 받은 경제활동인구조사 데이터 중 전체 취업자 데이터로 2003.1월부터 2020년 12월까지의 데이터, 세번째 데이터는 두번째 데이터와 같은 조사에서 얻어진 데이터로 교육서비스업 데이터이다. 첫번째 데이터는 년별 데이터이기 때문에 추세는 보이지만 계절성은 없고 두번째와 세번째 데이터는 월별 데이터이지만 두번째 데이터는 세번째 데이터보다 계절성이 더 짙은 데이터이다. https://hbr.org/1971/07/how-to-choose-the-right-forecasting-technique "],["simple-모델링-알고리즘.html", "6.1 Simple 모델링 알고리즘", " 6.1 Simple 모델링 알고리즘 simple 모델링 알고리즘은 Rob Hyndman의 ’Forecasting : principals and practice’에서 그룹핑한 알고리즘과 명칭을 사용했다.3 따라서 Simple 모델링이라는 명칭과 알고리즘들은 일반적인 분류는 아닐수 있다. 사실 Simple 알고리즘을 보면 ’이게 무슨 예측이야?’라고 생각할 수도 있다. 하지만 우리가 매우 쉽게 접하고 사용하는 ’평균’이라는 것도 통계적 모델링에 하나라고 보면 Simple 알고리즘도 충분히 시계열 데이터의 모델링으로 볼 수도 있다. Simple 모델링의 대부분은 매우 간단한 개념을 함수화 하여 미래 예측에 활용할 수 있도록 제작되었다. Simple 모델링에서 제시하는 대부분의 함수는 forecast 패키지(앞에서 설명한 Rob Hyndman이 주도하여 제작된 패키지임)에서 제공하는 함수를 위주로 설명하고자 한다.4 6.1.1 평균 모델(forecast::meanf) 평균 모델은 우리가 흔히 알고 있는 평균이 앞으로의 미래에도 적용하는 방법이다. forecast 패키지에서는 meanf() 함수를 통해 시계열 데이터의 평균을 활용한 미래 예측값을 반환하는 함수를 제공한다. 이 함수에서는 평균 모델에 의한 점 예측값(Point Forecast)뿐 아니라 예측구간 80%와 95%를 산출해 준다. 매개변수를 설정함으로써 이 예측구간을 Bootstrap 방법을 통해 산출할 수도 있다. meanf() 함수의 입력 데이터는 숫자 벡터나 ts 클래스 객체를 사용한다. meanf()함수의 결과를 plot하기 위해서는 autoplot() 함수에 meanf() 결과 객체를 전달하여 ploting 할 수 있다. library(forecast) summary(meanf(students.total.ts[,1])) ## ## Forecast method: Mean ## ## Model Information: ## $mu ## [1] 7598603 ## ## $mu.se ## [1] 189914 ## ## $sd ## [1] 890775.4 ## ## $bootstrap ## [1] FALSE ## ## $call ## meanf(y = students.total.ts[, 1]) ## ## attr(,&quot;class&quot;) ## [1] &quot;meanf&quot; ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -1.694451e-10 870295.1 780669 -1.422719 10.7441 6.074563 0.8753895 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 7598603 6393450 8803757 5704501 9492706 ## 2022 7598603 6393450 8803757 5704501 9492706 ## 2023 7598603 6393450 8803757 5704501 9492706 ## 2024 7598603 6393450 8803757 5704501 9492706 ## 2025 7598603 6393450 8803757 5704501 9492706 ## 2026 7598603 6393450 8803757 5704501 9492706 ## 2027 7598603 6393450 8803757 5704501 9492706 ## 2028 7598603 6393450 8803757 5704501 9492706 ## 2029 7598603 6393450 8803757 5704501 9492706 ## 2030 7598603 6393450 8803757 5704501 9492706 autoplot(meanf(students.total.ts[,1])) autoplot(meanf(students.total.ts[,1], bootstrap = TRUE)) autoplot(meanf(employees.ts[,2])) autoplot(meanf(employees.ts[,3])) 6.1.2 단순(Naive) 모델 단순(Naive) 모델은 시계열 측정값의 마지막 값이 지속될 것이라는 가정하에 향후 데이터값을 예측하는 모델이다. 이 모델은 경제 금융 시계열 모델에서 많이 사용된다.5 앞선 평균 모델과 달리 Naive 모델의 예측구간은 예측 시간이 늘어날수록 범위가 늘어난다. 일반적으로 시계열 모델의 예측구간은 예측기간이 늘어날 수록 범위가 넓어지는 경향을 지닌다. summary(naive(students.total.ts[,1])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = students.total.ts[, 1]) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(naive(students.total.ts[,1])) summary(naive(employees.ts[,2])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(naive(employees.ts[,2])) summary(naive(employees.ts[,2])) ## ## Forecast method: Naive method ## ## Model Information: ## Call: naive(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(naive(employees.ts[,3])) 6.1.3 계절성 단순(Seasonal Naive) 모델 계절성 단순(Seasonal Naive) 모델은 단순(Naive) 모델에서 계절성을 추가한 모델이다. 계절성(Seasonal Pattern)은 주기성(Cyclic Pattern)과 다르다. 계절성은 일정한 주기를 가지고 반복되는 패턴을 의미하지만 주기성은 패턴은 반복되지만 주기가 일정하지 않다는 점에서 다르다. 주기성의 주기는 일반적으로 2년보다 크기때문에 여러 연도에 걸쳐 나타나지만 계절성은 일반적으로 달력의 특성에 연관되어 주기를 갖는 경우가 일반적이다.6 summary(snaive(students.total.ts[,1], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = students.total.ts[, 1], h = 10) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(snaive(students.total.ts[,1], 10)) summary(snaive(employees.ts[,2], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = employees.ts[, 2], h = 10) ## ## Residual sd: 281.6863 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 229.2857 361.904 316.9524 0.8720369 1.19817 1 0.8173272 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26800 26336.2 27263.8 26090.68 27509.32 ## Feb 2021 26838 26374.2 27301.8 26128.68 27547.32 ## Mar 2021 26609 26145.2 27072.8 25899.68 27318.32 ## Apr 2021 26562 26098.2 27025.8 25852.68 27271.32 ## May 2021 26930 26466.2 27393.8 26220.68 27639.32 ## Jun 2021 27055 26591.2 27518.8 26345.68 27764.32 ## Jul 2021 27106 26642.2 27569.8 26396.68 27815.32 ## Aug 2021 27085 26621.2 27548.8 26375.68 27794.32 ## Sep 2021 27012 26548.2 27475.8 26302.68 27721.32 ## Oct 2021 27088 26624.2 27551.8 26378.68 27797.32 autoplot(snaive(employees.ts[,2], 10)) summary(snaive(employees.ts[,3], 10)) ## ## Forecast method: Seasonal naive method ## ## Model Information: ## Call: snaive(y = employees.ts[, 3], h = 10) ## ## Residual sd: 61.3048 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 4.5 61.10471 50.45238 0.1996211 2.735763 1 0.8602258 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 1844 1765.691 1922.309 1724.237 1963.763 ## Feb 2021 1828 1749.691 1906.309 1708.237 1947.763 ## Mar 2021 1770 1691.691 1848.309 1650.237 1889.763 ## Apr 2021 1759 1680.691 1837.309 1639.237 1878.763 ## May 2021 1814 1735.691 1892.309 1694.237 1933.763 ## Jun 2021 1829 1750.691 1907.309 1709.237 1948.763 ## Jul 2021 1831 1752.691 1909.309 1711.237 1950.763 ## Aug 2021 1793 1714.691 1871.309 1673.237 1912.763 ## Sep 2021 1768 1689.691 1846.309 1648.237 1887.763 ## Oct 2021 1772 1693.691 1850.309 1652.237 1891.763 autoplot(snaive(employees.ts[,3], 10)) 6.1.4 random work 모델 랜덤 워크는 시간적으로 다음값이 시간적으로 현재값의 영향을 받는다는 이론이다. 주식의 예에서 보면 내일의 종가는 오늘의 종가에 랜덤한 값이 더해지거나 빼져서 결정되는 것과 같은 이치이다. 랜덤 워크에는 어제값 이외에 의미있는 정보가 없기 때문에 예측이 복잡하지 않다7. 앞에서 설명한 Naive 모델은 마지막 값이 지속되는 예측인데 이것이 결국 랜덤 워크와 동일한 결과를 가지게 된다. 랜덤 워크 모델은 드리프트가 없는 모델과 드리프트가 존재하는 모델의 두가지 종류가 있다. 드리프트가 존재하는 모델은 랜덤워크 모델을 기반으로 하지만 예측값이 시간의 흐름에 따라 증가하거나 감소하는 모델이다. summary(rwf(students.total.ts[,1])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = students.total.ts[, 1]) ## ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -126815.2 147831.2 128514.4 -1.771615 1.791893 1 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5995239 5805786 6184692 5705495 6284983 ## 2022 5995239 5727312 6263166 5585479 6404999 ## 2023 5995239 5667096 6323382 5493388 6497090 ## 2024 5995239 5616332 6374146 5415751 6574727 ## 2025 5995239 5571608 6418870 5347352 6643126 ## 2026 5995239 5531175 6459303 5285514 6704964 ## 2027 5995239 5493993 6496485 5228649 6761829 ## 2028 5995239 5459384 6531094 5175720 6814758 ## 2029 5995239 5426879 6563599 5126007 6864471 ## 2030 5995239 5396135 6594343 5078988 6911490 autoplot(rwf(students.total.ts[,1])) summary(rwf(employees.ts[,2])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(rwf(employees.ts[,2])) summary(rwf(employees.ts[,2])) ## ## Forecast method: Random walk ## ## Model Information: ## Call: rwf(y = employees.ts[, 2]) ## ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 23.56842 261.4803 194.5579 0.08782727 0.7411892 0.6138395 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26526 26190.90 26861.10 26013.51 27038.49 ## Feb 2021 26526 26052.10 26999.90 25801.23 27250.77 ## Mar 2021 26526 25945.59 27106.41 25638.34 27413.66 ## Apr 2021 26526 25855.80 27196.20 25501.02 27550.98 ## May 2021 26526 25776.69 27275.31 25380.03 27671.97 ## Jun 2021 26526 25705.17 27346.83 25270.66 27781.34 ## Jul 2021 26526 25639.41 27412.59 25170.07 27881.93 ## Aug 2021 26526 25578.19 27473.81 25076.45 27975.55 ## Sep 2021 26526 25520.70 27531.30 24988.52 28063.48 ## Oct 2021 26526 25466.32 27585.68 24905.36 28146.64 autoplot(rwf(employees.ts[,3])) summary(rwf(students.total.ts[,1], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = students.total.ts[, 1], drift = TRUE) ## ## Drift: -126815.1905 (se 16988.204) ## Residual sd: 77849.7308 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -1.773887e-10 75973.56 63881.97 -0.06808499 0.8320398 0.4970802 ## ACF1 ## Training set 0.8922526 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 5868424 5768655 5968192 5715841 6021006 ## 2022 5741609 5597194 5886023 5520746 5962471 ## 2023 5614793 5433948 5795639 5338214 5891373 ## 2024 5487978 5274664 5701292 5161743 5814214 ## 2025 5361163 5117753 5604573 4988899 5733427 ## 2026 5234348 4962425 5506271 4818478 5650218 ## 2027 5107533 4808227 5406838 4649785 5565281 ## 2028 4980717 4654875 5306560 4482385 5479050 ## 2029 4853902 4502177 5205628 4315985 5391820 ## 2030 4727087 4349998 5104176 4150379 5303795 autoplot(rwf(students.total.ts[,1], drift = TRUE)) summary(rwf(employees.ts[,2], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = employees.ts[, 2], drift = TRUE) ## ## Drift: 23.5684 (se 26.8599) ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 9.956667e-13 260.416 190.0696 -0.0013627 0.7245059 0.5996787 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26549.57 26214.06 26885.08 26036.45 27062.68 ## Feb 2021 26573.14 26096.17 27050.11 25843.68 27302.60 ## Mar 2021 26596.71 26009.50 27183.91 25698.66 27494.75 ## Apr 2021 26620.27 25938.75 27301.80 25577.97 27662.58 ## May 2021 26643.84 25877.99 27409.69 25472.58 27815.10 ## Jun 2021 26667.41 25824.24 27510.58 25377.89 27956.93 ## Jul 2021 26690.98 25775.71 27606.25 25291.19 28090.76 ## Aug 2021 26714.55 25731.25 27697.84 25210.72 28218.37 ## Sep 2021 26738.12 25690.07 27786.16 25135.27 28340.96 ## Oct 2021 26761.68 25651.60 27871.77 25063.95 28459.41 autoplot(rwf(employees.ts[,2], drift = TRUE)) summary(rwf(employees.ts[,2], drift = TRUE)) ## ## Forecast method: Random walk with drift ## ## Model Information: ## Call: rwf(y = employees.ts[, 2], drift = TRUE) ## ## Drift: 23.5684 (se 26.8599) ## Residual sd: 261.7975 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 9.956667e-13 260.416 190.0696 -0.0013627 0.7245059 0.5996787 ## ACF1 ## Training set 0.4208691 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26549.57 26214.06 26885.08 26036.45 27062.68 ## Feb 2021 26573.14 26096.17 27050.11 25843.68 27302.60 ## Mar 2021 26596.71 26009.50 27183.91 25698.66 27494.75 ## Apr 2021 26620.27 25938.75 27301.80 25577.97 27662.58 ## May 2021 26643.84 25877.99 27409.69 25472.58 27815.10 ## Jun 2021 26667.41 25824.24 27510.58 25377.89 27956.93 ## Jul 2021 26690.98 25775.71 27606.25 25291.19 28090.76 ## Aug 2021 26714.55 25731.25 27697.84 25210.72 28218.37 ## Sep 2021 26738.12 25690.07 27786.16 25135.27 28340.96 ## Oct 2021 26761.68 25651.60 27871.77 25063.95 28459.41 autoplot(rwf(employees.ts[,3], drift = TRUE)) 랜덤 워크는 시간적으로 하나 앞선 값과 현재값을 뺀 차이값들은 백색잡음이 되어야한다는 조건을 만족해야한다. 따라서 랜덤 워크 모델은 차분을 통해서백색잡음이 될 수도 있고 백색잡음은 누적합계를 통해서 랜덤 워크가 될 수 있다. set.seed(345) whitenoise &lt;- ts(rnorm(100), start = 1) ### white noise simulation 데이터 생성 ts.plot(whitenoise) whitenoise.to.randomwalk &lt;- cumsum(whitenoise) ### white noise 데이터로 random walk 생성 ts.plot(whitenoise.to.randomwalk) randomwalk.to.whitenoise &lt;- diff(whitenoise.to.randomwalk) ### random walk에서 white noise 생성 ts.plot(randomwalk.to.whitenoise) 6.1.5 Simple 모델 비교 위에서 설명한 모델들을 하나의 plot으로 그려보면 모델 간의 차이를 살펴볼 수 있다. autoplot(meanf(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(students.total.ts[,1], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(students.total.ts[,1], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) autoplot(meanf(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(employees.ts[,2], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(employees.ts[,2], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(employees.ts[,2], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) autoplot(meanf(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Mean&#39;) + autolayer(naive(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Naive&#39;) + autolayer(snaive(employees.ts[,3], h = 10), PI = FALSE, series = &#39;Snaive&#39;) + autolayer(rwf(employees.ts[,3], h = 10), PI = FALSE, series = &#39;RW&#39;) + autolayer(rwf(employees.ts[,3], h = 10, drift = TRUE), PI = FALSE, series = &#39;RW with drift&#39;) https://otexts.com/fpp2/ https://otexts.com/fpp2/simple-methods.html https://otexts.com/fpp2/simple-methods.html https://robjhyndman.com/hyndsight/cyclicts/ https://robjhyndman.com/files/solutions.pdf "],["regression-모델.html", "6.2 Regression 모델", " 6.2 Regression 모델 회귀 모델은 선형 회귀(Linear Regression), 비선형 회귀,(Non-linear Regression) 로지스틱 회귀(Logistic Regression) 등의 방법이 있다. 회귀 모델은 종속변수와 독립변수와의 관계를 가장 잘 나타내는 회귀방정식을 도출하여 미래 데이터에 대한 예측치를 생성하는 방법으로 아직도 머신러닝 알고리즘 중에 가장 많이 사용되는 알고리즘 중에 하나이다.8 본 문서에서는 R에서 회귀 알고리즘을 구현하는 방법을 다루지는 않고 시계열 데이터의 회귀 알고리즘을 적용하는 방법에 대해 설명하겠다. 시계열 데이터의 회귀 모델은 두가지로 구분할 수 있다. 첫번째는 두가지이상의 시계열 데이터(Multivariate) 간의 회귀 모델과 한가지 시계열 데이터(Univariate)의 시간에 따른 회귀모델이다. 사실 첫번째 모델의 경우는 일반적 회귀모델과 큰 차이는 없지만 사용하는 함수는 시계열 패키지에서 따로 제공된다. 두번째 모델의 경우는 시계열 데이터의 특성인 추세(trend)와 계절성(season), 반복성(cycle)을 회귀에 반영한다는 점에서 일반적 회귀와는 차이가 있다. 시계열 선형 회귀 모델은 데이터간의 관계를 가장 잘 나타내는 직선(Linear)을 산출하여 미래 데이터를 예측하는 방법이다. 선형 회귀 모델은 선형 방정식으로 표현되는데 직선의 기울기(Slope)와 Y 축 절편(Intercept)의 계수(Coefficient)가 산출된다. 시계열 데이터의 선형 회귀를 위해서 forecast 패키지에서 tslm()함수, timetk 패키지의 plot_time_series_regression() 함수(stats::lm() 함수를 사용하여 선형회귀 결과를 ploting하는 함수), modeltime 패키지(timetk 패키지의 모델링 패키지)의 linear_reg() 함수 등을 사용할 수 있다. 6.2.1 tslm 함수(forecast 패키지) forecast 패키지에서 제공하는 tslm() 함수는 시계열 선형회귀 모델을 위한 함수이다. tslm() 함수는 lm() 함수의 래퍼 함수(Wrapper)로 사용법은 비슷하고 시간축이 독립변수에 포함되지 않은 두개 혹은 두개 이상의 시계열 객체에 대한 선형회귀는 lm() 함수의 결과와 같다. 즉 시계열 데이터이지만 독립변수 시간이 포함되지 않는다면 시계열 데이터로써의 특성이 적용되지 않은 양 데이터간의 특성정보만으로 선형회귀 방정식이 얻어진다. 반면 시간을 독립변수로 하여 선형회귀 모형을 적용하기 위해서는 ‘trend,’ ‘season’ 키워드를 함수식의 독립변수에 적용해 줌으로써 시간에 대한 선형회귀 방정식을 얻을 수 있다. ‘trend’는 시계열적인 추세를 반영하여 선형회귀 모델을 만들고 ’season’은 시계열의 계절성을 반영하여 회귀모델을 만들게 되는데 두가지를 모두 고려할 때는’+’ 기호로 연결하여 사용할 수 있다. 이 과정에서 추가적인 독립변수를 추가할 수도 있는데 독립변수를 추가할 때도 ‘+’ 기호를 사용하여 회귀모델을 만들 수 있다. ### 전체 학생수 예측 모델을 추세를 반영하여 생성 student.ts.lm &lt;- tslm(students.total.ts[,3] ~ trend, data = students.total.ts) summary(student.ts.lm) ## ## Call: ## tslm(formula = students.total.ts[, 3] ~ trend, data = students.total.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -378680 -174765 -58 210909 243604 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4402542 91504 48.11 &lt; 2e-16 *** ## trend -88325 6967 -12.68 5.12e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 207300 on 20 degrees of freedom ## Multiple R-squared: 0.8893, Adjusted R-squared: 0.8838 ## F-statistic: 160.7 on 1 and 20 DF, p-value: 5.119e-11 student.ts.lm %&gt;% forecast() ### tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2371064 2070723 2671405 1898355 2843772 ## 2022 2282739 1979011 2586467 1804699 2760779 ## 2023 2194414 1887058 2501769 1710664 2678163 ## 2024 2106089 1794874 2417304 1616265 2595912 ## 2025 2017763 1702466 2333061 1521514 2514013 ## 2026 1929438 1609843 2249033 1426426 2432451 ## 2027 1841113 1517015 2165212 1331013 2351214 ## 2028 1752788 1423989 2081588 1235288 2270288 ## 2029 1664463 1330773 1998153 1139266 2189660 ## 2030 1576138 1237376 1914899 1042959 2109317 student.ts.lm %&gt;% forecast() %&gt;% autoplot() student.ts.lm &lt;- tslm(students.total.ts[,5] ~ trend, data = students.total.ts) ### 초등학생 학생수를 예측모델에 독립변수로 트랜드를 사용하는 선형 모델을 생성 student.ts.lm %&gt;% forecast(h = 22) %&gt;% autoplot() student.ts.lm &lt;- tslm(students.total.ts[,5] ~ students.total.ts[,4] + trend, data = students.total.ts) ### 초등학생 학생수를 예측모델에 독립변수로 유치원 학생수와 트랜드를 사용하는 선형 모델을 생성 student.ts.lm %&gt;% forecast(h = 22) %&gt;% autoplot() 위의 예제에서 사용한 데이터는 연도별 학생수의 합계이다. 이 데이터와 같은 연도별 데이터는 계절성이 존재하지 않기 때문에 season 키워드를 사용하면 아래와 같이 에러를 낸다. student.ts.lm &lt;- tslm(students.total.ts[,3] ~ trend + season, data = students.total.ts) ## Error in tslm(students.total.ts[, 3] ~ trend + season, data = students.total.ts): Non-seasonal data cannot be modelled using a seasonal factor 전체 취업자수와 교육서비스업 취업자수에 대한 선형회귀분석 모델과 plot은 다음과 같다. ### 전체 취업자수를 추세(trend)만으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,2] ~ trend, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 2] ~ trend, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1256.4 -264.1 119.9 350.6 525.7 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 25430.605 85.545 297.28 &lt;2e-16 *** ## trend 20.394 1.531 13.32 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 415.8 on 94 degrees of freedom ## Multiple R-squared: 0.6536, Adjusted R-squared: 0.6499 ## F-statistic: 177.3 on 1 and 94 DF, p-value: &lt; 2.2e-16 employee.total.ts.lm %&gt;% forecast() ### tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 27408.79 26860.89 27956.69 26565.89 28251.69 ## Feb 2021 27429.18 26880.94 27977.43 26585.75 28272.62 ## Mar 2021 27449.58 26900.97 27998.18 26605.59 28293.56 ## Apr 2021 27469.97 26921.01 28018.94 26625.43 28314.51 ## May 2021 27490.36 26941.03 28039.70 26645.25 28335.48 ## Jun 2021 27510.76 26961.05 28060.47 26665.07 28356.45 ## Jul 2021 27531.15 26981.06 28081.25 26684.87 28377.43 ## Aug 2021 27551.55 27001.06 28102.03 26704.66 28398.43 ## Sep 2021 27571.94 27021.06 28122.82 26724.45 28419.43 ## Oct 2021 27592.33 27041.05 28143.62 26744.22 28440.45 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() ### 전체 취업자수를 추세(trend)와 계절성(season)으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,2] ~ trend + season, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 2] ~ trend + season, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -675.70 -42.60 76.66 147.08 312.95 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 24850.616 96.043 258.744 &lt; 2e-16 *** ## trend 19.457 0.919 21.171 &lt; 2e-16 *** ## season2 1.168 123.798 0.009 0.99249 ## season3 318.462 123.808 2.572 0.01189 * ## season4 629.005 123.825 5.080 2.29e-06 *** ## season5 869.174 123.849 7.018 5.63e-10 *** ## season6 919.342 123.880 7.421 9.13e-11 *** ## season7 935.260 123.918 7.547 5.14e-11 *** ## season8 803.429 123.962 6.481 6.13e-09 *** ## season9 854.597 124.013 6.891 9.94e-10 *** ## season10 890.516 124.071 7.177 2.75e-10 *** ## season11 898.809 124.135 7.241 2.07e-10 *** ## season12 385.477 124.207 3.104 0.00261 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 247.6 on 83 degrees of freedom ## Multiple R-squared: 0.8915, Adjusted R-squared: 0.8759 ## F-statistic: 56.86 on 12 and 83 DF, p-value: &lt; 2.2e-16 employee.total.ts.lm %&gt;% forecast() ### tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26737.91 26392.65 27083.16 26206.34 27269.47 ## Feb 2021 26758.53 26413.28 27103.78 26226.97 27290.09 ## Mar 2021 27095.28 26750.03 27440.53 26563.72 27626.84 ## Apr 2021 27425.28 27080.03 27770.53 26893.72 27956.84 ## May 2021 27684.91 27339.65 28030.16 27153.34 28216.47 ## Jun 2021 27754.53 27409.28 28099.78 27222.97 28286.09 ## Jul 2021 27789.91 27444.65 28135.16 27258.34 28321.47 ## Aug 2021 27677.53 27332.28 28022.78 27145.97 28209.09 ## Sep 2021 27748.16 27402.90 28093.41 27216.59 28279.72 ## Oct 2021 27803.53 27458.28 28148.78 27271.97 28335.09 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() ### 교육분야 취업자수를 추세(trend)와 계절성(season)으로 선형 회귀분석 employee.total.ts.lm &lt;- tslm(employees.ts[,3] ~ trend + season, data = employees.ts) summary(employee.total.ts.lm) ## ## Call: ## tslm(formula = employees.ts[, 3] ~ trend + season, data = employees.ts) ## ## Residuals: ## Min 1Q Median 3Q Max ## -106.764 -21.988 6.553 23.192 102.373 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1789.2983 19.0207 94.071 &lt;2e-16 *** ## trend 0.5628 0.1820 3.092 0.0027 ** ## season2 -7.5628 24.5174 -0.308 0.7585 ## season3 6.7493 24.5194 0.275 0.7838 ## season4 19.0615 24.5228 0.777 0.4392 ## season5 32.3737 24.5275 1.320 0.1905 ## season6 41.3108 24.5336 1.684 0.0960 . ## season7 41.2480 24.5410 1.681 0.0966 . ## season8 31.0602 24.5498 1.265 0.2093 ## season9 33.1224 24.5599 1.349 0.1811 ## season10 33.0595 24.5714 1.345 0.1821 ## season11 36.3717 24.5842 1.479 0.1428 ## season12 27.5589 24.5983 1.120 0.2658 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 49.03 on 83 degrees of freedom ## Multiple R-squared: 0.204, Adjusted R-squared: 0.0889 ## F-statistic: 1.772 on 12 and 83 DF, p-value: 0.06634 employee.total.ts.lm %&gt;% forecast() ### tslm 함수로 생성된 모델을 forecast()함수를 통해 예측값을 생성 ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 1843.893 1775.518 1912.268 1738.621 1949.165 ## Feb 2021 1836.893 1768.518 1905.268 1731.621 1942.165 ## Mar 2021 1851.768 1783.393 1920.143 1746.496 1957.040 ## Apr 2021 1864.643 1796.268 1933.018 1759.371 1969.915 ## May 2021 1878.518 1810.143 1946.893 1773.246 1983.790 ## Jun 2021 1888.018 1819.643 1956.393 1782.746 1993.290 ## Jul 2021 1888.518 1820.143 1956.893 1783.246 1993.790 ## Aug 2021 1878.893 1810.518 1947.268 1773.621 1984.165 ## Sep 2021 1881.518 1813.143 1949.893 1776.246 1986.790 ## Oct 2021 1882.018 1813.643 1950.393 1776.746 1987.290 employee.total.ts.lm %&gt;% forecast() %&gt;% autoplot() 선형 회귀분석을 시행할 때 주의해야 할 점은 잔차가 백색 잡음이어야 한다는 점이다. 잔차의 자가회귀성이 존재하는 경우는 시계열적 특성을 여전히 지니고 있기 때문에 이를 제거할 필요가 있다. 다만 이 예측은 ‘잘못된’ 것은 아니나 예측구간이 커지기 때문에 비효율적 예측 모델이 된다.9 또한 예측에 적용해야할 시계열적 특성이 남아있다는 것을 잔차에서 확인할 수 있다. 아래의 예에서 보면 전체 학생수를 추세에 의해 선형 회귀분석을 시행한 경우 잔차는 자기 상관성을 지니고 있음을 볼 수 있다. checkresiduals() 함수를 사용하여 확인하는데 plot만 봐도 백색잡음이 아님을 확인할 수 있지만 백색잡음 테스트인 Breusch-Godfrey 테스트 결과(checkresiduals() 함수는 회귀모델에 대해서는 Breusch-Godfrey 테스트를, 나머지는 Ljung-Box 테스트를 시행한다.)의 p-value가 0.05보다 작기 때문에 자기상관성이 존재하여 백색잡음으로 볼 수 없다. checkresiduals(tslm(students.total.ts[,3] ~ trend, data = students.total.ts)) ## ## Breusch-Godfrey test for serial correlation of order up to 5 ## ## data: Residuals from Linear regression model ## LM test = 16.435, df = 5, p-value = 0.005707 6.2.2 plot_time_series_regression 함수(timetk 패키지) timetk 패키지는 시계열 데이터를 핸들링하고 plotting 하는 데 주로 활용하는 패키지이다. 그래서 모델링을 위한 함수를 바로 제공하지는 않고 plotting 함수에서 회귀 모델을 호출하여 회귀 결과를 plotting 하는 함수를 제공한다. plot_time_series_regression() 함수에서 사용하는 선형회귀 함수에서도 trend, season 을 적용할 수 없다. 다만 ts 객체가 아닌 data.frame 객체를 사용할 수있다는 장점이 있다. plot_time_series_regression(.data = students %&gt;% filter(지역규모 == &#39;계&#39;), .date_var = 연도, .formula = 학생수계 ~ 연도, .interactive = FALSE, .show_summary = TRUE) ## ## Call: ## stats::lm(formula = .formula, data = .data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -327962 -206697 -48003 183951 390933 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 273181173 16513086 16.54 3.90e-13 *** ## 연도 -132164 8218 -16.08 6.61e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 244500 on 20 degrees of freedom ## Multiple R-squared: 0.9282, Adjusted R-squared: 0.9246 ## F-statistic: 258.7 on 1 and 20 DF, p-value: 6.608e-13 employees$date &lt;- as.Date(as.yearmon(employees$time, &quot;%Y. %m&quot;)) ###as.Date(paste0(employees[, 1], &#39;. 01&#39;), format = &#39;%Y. %m. %d&#39;) ### plot_time_series_regression에 trend만 반영시 plot_time_series_regression(.data = employees, .date_var = time, .formula = total ~ as.numeric(date), .interactive = FALSE) ### plot_time_series_regression에 trend, season(월)까지 반영시 plot_time_series_regression(.data = employees, .date_var = time, .formula = total ~ as.numeric(date) + lubridate::month(date, label = TRUE), .interactive = FALSE) ### plot_time_series_regression에 trend만 반영시 plot_time_series_regression(.data = employees, .date_var = time, .formula = employees.edu ~ as.numeric(date), .interactive = FALSE) # plot_time_series_regression에 trend, season(월)까지 반영시 plot_time_series_regression(.data = employees, .date_var = time, .formula = total ~ as.numeric(date) + lubridate::month(date, label = TRUE), .interactive = FALSE) 6.2.3 linear_reg 함수(tidymodels, parsnip, modeltime 패키지) 본 절에서 parship 패키지와 modeltime 패키지를 사용하여 선형 회귀 모델을 생성하는 방법을 소개한다. parsnip 패키지는 머신러닝 패키지인 ‘caret’ 패키지를 개발한 Max Kuhn이 개발한 패키지이다. 이 패키지는 R, Spark, Stan 등의 엔진에서 사용하는 함수들이 함수마다 다른 인수를 사용하기 때문에 사용자들이 사용하기 힘들다는 점에 착안하여 인수 이름을 표준화하여 사용할 수 있는 인터페이스를 제공한다.10 parsnip은 R의 여러 패키지에서 유사한 기능으로 제공하는 함수들을 사용하는 표준화된 접근 방법을 제공하는데 이 패키지를 사용하여 전체적인 머신러닝 모델을 생성하기 위해서는 몇가지 더 필요한 패키지를 사용해야한다. tidymodels(tidy 타입의 모델생성), skim(데이터 탐색), rsample(훈련용, 테스트용 데이터 분리), reciepes(데이터 전처리), yardstick(성능 분석)등의 패키지를 사용하는 방법이 많이 사용되고 있다. 그러나 시계열 모델에서는 tidymodels, modeltime 패키지를 사용할 수 있다. modeltime은 tidymodels 환경에서 시계열 데이터의 예측 프레임워크로 forecast 패키지에서 제공하는 대부분의 예측 방법을 제공하며 facebook에서 개발된 prophet 알고리즘까지 제공한다.11 tidymodels, parsnip, modeltime 패키지를 사용하여 시계열 데이터 선형 회귀 모델은 다음의 순서와 같이 만들 수 있다. 트레이닝 셋과 테스트 셋을 나눈다. (권장되지만 필수는 아니다.) linear_reg(), set_engine(), fit() 함수를 사용하여 선형 회귀모델을 생성한다. 먼저 linear_reg()함수를 통해 선형 회귀분석을 선언한다. 이 후 set_engine() 함수를 사용하여 선형 회귀 모델을 선정하는 계산방법을 지정한다. 아래의 예제에서는 ‘lm’ 방법을 지정함으로써 최소제곱법을 사용하여 선형 회귀 모델을 선정하게 된다. 마지막으로 모델링을 위한 포뮬라와 데이터를 fit() 함수를 통해 전달함으로서 최종 모델이 생성된다.12 생성된 모델을 modeltime_table() 함수에 적용하여 모델 테이블을 생성한다. 향후 설명하겠지만 모델 테이블에 여러 모델을 전달할 수 있는데 모델 테이블에 전달된 각각의 모델은 추후 성능비교 테이블이 제공되기 때문에 여러 모델의 성능을 비교하는데 편리하게 사용될 수 있다 . modeltime_calibrate() 함수를 사용하여 테스트 데이터를 사용하여 모델을 교정한다. 앞서 테스트 셋을 나누지 않은 경우는 전체 데이터 셋을 사용할 수 있다. modeltime_forecast() 함수를 사용하여 미래 데이터를 생성한다. 이후 plot_modeltime_forecast() 함수를 사용하여 plotting을 생성한다. library(modeltime) library(parsnip) library(tidymodels) ### 트레이닝 셋과 테스트 셋을 나눈다 splits &lt;- initial_time_split(employees, prop = 0.9) ### trend와 season을 반영하여 linear model을 생성 model_fit_lm &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) %&gt;% fit(total ~ as.numeric(date) + factor(lubridate::month(date, label = TRUE), ordered = FALSE), data = training(splits)) ### 모델 테이블 생성 model_tbl &lt;- modeltime_table(model_fit_lm) ### 테스팅 셋으로 모델 교정 calibration_tbl &lt;- model_tbl %&gt;% modeltime_calibrate(new_data = testing(splits)) ### 3년 예측치 생성후 plotting calibration_tbl %&gt;% modeltime_forecast( h = &#39;3 years&#39;, actual_data = employees, conf_interval = 0.95 ) %&gt;% plot_modeltime_forecast( .interactive = TRUE ) covid19.by.age$value1 &lt;- ifelse(is.na(covid19.by.age$value), 0, covid19.by.age$value) ### 트레이닝 셋과 테스트 셋을 나눈다 splits &lt;- initial_time_split(covid19.by.age %&gt;% filter(category == &#39;0-9세&#39;), prop = 0.9) ### trend와 season을 반영하여 linear model을 생성 model_fit_lm &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) %&gt;% fit(value ~ as.numeric(date), data = training(splits)) ### 모델 테이블 생성 model_tbl &lt;- modeltime_table(model_fit_lm) ### 테스팅 셋으로 모델 교정 calibration_tbl &lt;- model_tbl %&gt;% modeltime_calibrate(new_data = testing(splits)) ### 3년 예측치 생성후 plotting calibration_tbl %&gt;% modeltime_forecast( # .newdata = testing(splits), h = &#39;100 days&#39;, actual_data = covid19.by.age %&gt;% filter(category == &#39;0-9세&#39;) ) %&gt;% plot_modeltime_forecast( .interactive = TRUE ) 이기준 외, 인구지형변화에 따른 머신러닝 기반 고등교육 계열별 수요예측 모형 개발(2020), 한국교육개발원 https://otexts.com/fppkr/regression-evaluation.html https://cran.r-project.org/web/packages/parsnip/index.html https://cran.r-project.org/web/packages/modeltime/index.html https://www.tidymodels.org/start/models/ "],["지수-평활exponential-smoothing-모델.html", "6.3 지수 평활(Exponential Smoothing) 모델", " 6.3 지수 평활(Exponential Smoothing) 모델 지수평활 모델은 1950년대에 제안된 모델로 랜덤 워크(Random Walk) 모델과 같이 시계열 적으로 최근의 값이 유지될 확률이 크다는 점에서 나온 모델이다. 다만 랜덤 워크 모델과 같이 마지막 값에 모든 가중치를 둬서 일정하게 유지하는 것이 아닌 현재와 가까운 과거에 더 많은 가중치를 주고 이들의 이동 평균값을 구해서 예측하는 방법이다.13 최근의 데이터에 가중치를 높게 주기 때문에 추세, 계절성, 순환성이 심하지 않은 단기 데이터의 모델링에 적합한 방법이다. 추세나 계절성이 없는 데이터에 적합한 ’단순 지수평활 모델(Simple Exponential Smoothign), 추세가 있는 데이터에 적합한 홀트(Holt) 모델, 추세와 계절성이 있는 데이터에 적합한 홀트-윈터(Holt-Winter) 모델 등이 있다. 지수 평활 모델에서 핵심적인 변수는 평활 계수이다. 평활 매개변수는 앞서 설명한 현재와 가까운 과거에 할당하는 가중치를 의미한다. 평활 매개변수은 보통 0에서 1사이의 변수인데 홀트 모델이나 홀트-윈터 모델에서는 추가적인 계수가 추가될 수 있다. 이고 이 가중치를 어떻게 설정하는 가에 따라 예측 모델의 성능도 달라질 수 있다. 필자는 처음 이 모델을 접했을때 왜 지수(Exponential)과 평활(Smoothing) 이라는 이름을 사용했는지 궁금했다. 평활 매개변수를 설명하는 과정에서 명칭에서 지수를 붙인 이유는 설명이 되겠지만 아직도 평활이라는 이름을 붙인 이유는 명쾌하게 이해되지는 않는다. 시계열 데이터에 대한 추세선을 부드럽게, 스무딩하게 만드는 모델이라고 생각이 되나 사실 홀트-윈터 모델을 보면 별로 부드럽지 않다는 느낌이 들어서 이 부분에 대해 잘 아시는 분은 알려주시길 부탁드린다. 6.3.1 단순 지수 평활 모델(Simple Exponentail Smoothing Model) 단순 지수 평활 모델은 추세, 계절성 등의 시계열적 특성이 비교적 약한 데이터에 적합한 예측 모델이다. 단순 지수 평활 모델을 사용하기 위해서는 우선 평활 계수를 설정해아한다. 평활 계수는 과거치에 대한 가중치로 현재에 가장 가까운 첫번째 과거 데이터에 대한 가중치이다. 이후 가중치 들은 1에서 가중치를 뺀 가중치(1-평활계수)로 설정하고 과거로 계속 갈수록 (1-평활계수)를 계속 곱해서 가중치를 할당한다. 평활 계수를 0.5로 가정하고 학생수 예에 적용해 보면 다음의 표와 같이 가중치가 설정되게 된다. 평활 계수가 지수형태로 계산되기 때문에 평활계수의 합은 1이 될 수 없다. 연도 가중치(평활계수 = 0.5) 2020 0.5 2019 0.25 = (1 - 0.5) 2018 0.125 = (1 - 0.5) * (1 - 0.5) 2017 0.0625 = (1 - 0.5) * (1 - 0.5) * (1 - 0.5) … … 단순 지수 평활 모델을 적용하는 방법은 forecast 패키지의 ses() 함수를 사용하면 모델을 구축할 수 있다. ses() 함수에서는 평활 계수를 alpha 매개변수를 통해 설정할 수 있지만 설정하지 않으면 자동으로 계산하여 설정해준다. ses() 함수는 뒤에서 설명하는 홀트 모델, 홀트-윈터 모델도 beta와 gamma 매개변수를 통해 생성할 수 있다. ses() 함수를 통해 생성되는 모델은 몇가지 특성값을 가지는데 앞에서 설명한 평활계수가 alpha로 표현되고 초기상태값인 l 값이 나타난다. 단순 지수 평활 모델은 한단계씩 예측해나가는 방법(One Step Forecast)이기 때문에 초기값인 l값부터 시작하여 한단계 앞 값을 예측하고 또 다음 단계를 예측하는 방법으로 수행된다. l 값을 산출하는 방법은 Rob Hyndman의 저서에서 확인할 수 있다.14 이는 ses() 모델을 summary() 함수를 통해 실행시키면 확인이 가능하다. ses(students.total.ts[,3]) ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2693721 2552247 2835196 2477355 2910088 ## 2022 2693721 2493657 2893786 2387749 2999694 ## 2023 2693721 2448697 2938746 2318989 3068454 ## 2024 2693721 2410794 2976649 2261021 3126421 ## 2025 2693721 2377401 3010042 2209951 3177492 ## 2026 2693721 2347211 3040232 2163779 3223664 ## 2027 2693721 2319448 3067995 2121319 3266123 ## 2028 2693721 2293607 3093836 2081799 3305644 ## 2029 2693721 2269336 3118106 2044681 3342762 ## 2030 2693721 2246381 3141062 2009573 3377870 autoplot(students.total.ts[,3]) + autolayer(fitted(ses(students.total.ts[,3])), series = &#39;ses 적합값&#39;) + autolayer(ses(students.total.ts[,3])) summary(ses(students.total.ts[,3])) ## ## Forecast method: Simple exponential smoothing ## ## Model Information: ## Simple exponential smoothing ## ## Call: ## ses(y = students.total.ts[, 3]) ## ## Smoothing parameters: ## alpha = 0.9999 ## ## Initial states: ## l = 3992517.6433 ## ## sigma: 110392.9 ## ## AIC AICc BIC ## 582.8254 584.1587 586.0985 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set -59042.1 105255.5 87631.13 -1.838867 2.620738 0.9836978 0.8081078 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2693721 2552247 2835196 2477355 2910088 ## 2022 2693721 2493657 2893786 2387749 2999694 ## 2023 2693721 2448697 2938746 2318989 3068454 ## 2024 2693721 2410794 2976649 2261021 3126421 ## 2025 2693721 2377401 3010042 2209951 3177492 ## 2026 2693721 2347211 3040232 2163779 3223664 ## 2027 2693721 2319448 3067995 2121319 3266123 ## 2028 2693721 2293607 3093836 2081799 3305644 ## 2029 2693721 2269336 3118106 2044681 3342762 ## 2030 2693721 2246381 3141062 2009573 3377870 ses(students.total.ts[,3], alpha = 0.5) ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2710069 2453771 2966366 2318095 3102042 ## 2022 2710069 2423519 2996618 2271829 3148308 ## 2023 2710069 2396169 3023968 2230001 3190136 ## 2024 2710069 2371019 3049119 2191536 3228601 ## 2025 2710069 2347609 3072528 2155734 3264403 ## 2026 2710069 2325622 3094515 2122108 3298029 ## 2027 2710069 2304826 3115311 2090304 3329833 ## 2028 2710069 2285047 3135090 2060054 3360083 ## 2029 2710069 2266148 3153989 2031150 3388987 ## 2030 2710069 2248021 3172116 2003428 3416709 ses(students.total.ts[,3], alpha = 0.5) %&gt;% autoplot() autoplot(employees.ts[,2]) + autolayer(fitted(ses(employees.ts[,2])), series = &#39;ses 적합값&#39;) + autolayer(ses(employees.ts[,2])) 평활 계수가 클수록 데이터 변화에 빠르게 반응하여 예측의 감응도가 높지만 평활계수가 작으면 데이터의 변화에 느리게 반응하여 예측의 안정성이 높아진다15 autoplot(students.total.ts[,3], series = &#39;원본&#39;, color = &#39;black&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.1)), PI = FALSE, series = &#39;alpha = 0.1&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.2)), PI = FALSE, series = &#39;alpha = 0.2&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.3)), PI = FALSE, series = &#39;alpha = 0.3&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.4)), PI = FALSE, series = &#39;alpha = 0.4&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.5)), PI = FALSE, series = &#39;alpha = 0.5&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.6)), PI = FALSE, series = &#39;alpha = 0.6&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.7)), PI = FALSE, series = &#39;alpha = 0.7&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.8)), PI = FALSE, series = &#39;alpha = 0.8&#39;) + autolayer(fitted(ses(students.total.ts[,3], alpha = 0.9)), PI = FALSE, series = &#39;alpha = 0.9&#39;) 6.3.2 홀트(Holt) 모델 홀트(holt) 모델은 지수 평활 모델을 확장하여 추세를 반영하는 모델이다. 홀트 모델은 추세조정 지수평활법이나 이중 지수 평활법으로 해석되기도 한다. 추세를 반영하기 위해 평활 계수인 alpha와 추세 기울기 값 beta를 사용하여 모델을 세운다. 평활 계수 값과 마찬가지로 추세 기울기 값도 0과 1사이의 값을 지니고 이 값을 반영한 이동평균을 통해 예측값을 산출한다. 홀트 모델은 앞선 단순 지수 평활 모델에 사용했던 ses() 함수에 추세 기울기 값인 beta 값을 추가하여 사용할 수도 있고 forecast 패키지에서 제공하는 holt() 함수를 사용하여 모델을 생성할 수도 있다. 다만 alpha, beta 등의 매개변수를 지정하지 않으면 자동 계산되어 적절한 값이 사용된다. autoplot(students.total.ts[,3]) + autolayer(fitted(holt(students.total.ts[,3])), series = &#39;holt 적합값&#39;) + autolayer(holt(students.total.ts[,3])) summary(holt(students.total.ts[,3])) ## ## Forecast method: Holt&#39;s method ## ## Model Information: ## Holt&#39;s method ## ## Call: ## holt(y = students.total.ts[, 3]) ## ## Smoothing parameters: ## alpha = 0.9999 ## beta = 0.288 ## ## Initial states: ## l = 4343612.7635 ## b = -29866.4656 ## ## sigma: 131515.5 ## ## AIC AICc BIC ## 592.2109 595.9609 597.6661 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ACF1 ## Training set 1053.799 118960.2 90931.13 0.1951923 2.642304 1.020742 0.08553976 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2021 2670530 2501987 2839074 2412764.8 2928296 ## 2022 2647340 2372523 2922158 2227043.8 3067637 ## 2023 2624151 2241959 3006342 2039639.7 3208662 ## 2024 2600961 2106233 3095689 1844339.6 3357582 ## 2025 2577771 1964343 3191199 1639614.2 3515928 ## 2026 2554581 1816072 3293090 1425129.2 3684033 ## 2027 2531391 1661464 3401318 1200952.4 3861830 ## 2028 2508201 1500660 3515742 967300.1 4049102 ## 2029 2485011 1333836 3636187 724440.3 4245582 ## 2030 2461821 1161174 3762469 472653.3 4450990 holt(employees.ts[,2]) %&gt;% autoplot() holt(employees.ts[,3]) %&gt;% autoplot() autoplot(wide.covid19.by.age.ts[,2]) + autolayer(fitted(holt(wide.covid19.by.age.ts[,2])), series = &#39;적합값&#39;) + autolayer(holt(wide.covid19.by.age.ts[,2]), series = &#39;예측값&#39;) 홀트 모델은 위와 같이 일정한 증가, 감소가 나타난다. 추세가 증가 추세이면 예측값이 계속 증가하게 되고 감소추세이면 계속 감소하게 된다. 특히 감소추세 일때 계속 감소하면 어느 순간 음수값을 가질수도 있다. 따라서 감소 추세가 있는 경우 어느정도에서 감소추세를 지연시킬 필요가 있다. holt() 함수에서는 damped 매개변수를 통해 감소추세를 지연시킬 수 있다. autoplot(students.total.ts[,3]) + autolayer(fitted(holt(students.total.ts[,3])), series = &#39;holt&#39;) + autolayer(fitted(holt(students.total.ts[,3], damped = TRUE)), series = &#39;holt damped&#39;) + autolayer(holt(students.total.ts[,3]), series = &#39;예측&#39;, PI = FALSE) + autolayer(holt(students.total.ts[,3], damped = TRUE), series = &#39;damped 예측&#39;, PI = FALSE) holt(employees.ts[,2]) %&gt;% autoplot() autoplot(employees.ts[,2]) + autolayer(fitted(holt(employees.ts[,2])), series = &#39;holt&#39;) + autolayer(fitted(holt(employees.ts[,2], damped = TRUE)), series = &#39;holt damped&#39;) + autolayer(holt(employees.ts[,2]), series = &#39;예측&#39;, PI = FALSE) + autolayer(holt(employees.ts[,2], damped = TRUE), series = &#39;damped 예측&#39;, PI = FALSE) 추세 기울기 값에 따른 변동은 아래 plot과 같이 나타난다. 사실상 추세 기울기 값은 결과값에 큰 차이를 나타내지 않는다. autoplot(employees.ts[,2]) + autolayer(fitted(holt(employees.ts[,2], beta = 0.1)), PI = FALSE, series = &#39;beta = 0.1&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.2)), PI = FALSE, series = &#39;beta = 0.2&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.3)), PI = FALSE, series = &#39;beta = 0.3&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.4)), PI = FALSE, series = &#39;beta = 0.4&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.5)), PI = FALSE, series = &#39;beta = 0.5&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.6)), PI = FALSE, series = &#39;beta = 0.6&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.7)), PI = FALSE, series = &#39;beta = 0.7&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.8)), PI = FALSE, series = &#39;beta = 0.8&#39;) + autolayer(fitted(holt(employees.ts[,2], beta = 0.9)), PI = FALSE, series = &#39;beta = 0.9&#39;) 6.3.3 홀트-윈터(Holt-Winter) 모델 홀트-윈터(Holt-Winter) 모델은 단순 지수 평활 모델을 확장하여 추세와 계절성을 반영하는 모델이다. 홀트-윈터 모델은 ses 모델의 alpha, 홀트 모델의 beta에 계절 매개변수인 gamma까지 포함하기 때문에 삼중 지수 평활법이나 계절조정 지수 평활법이라고도 한다. 홀트-윈터 모델도 앞선 홀트 모델과 같이 ses() 함수에 추세 기울기 값인 beta 값과 계절 변수인 gamma 값을 추가하여 사용할 수도 있고 forecast 패키지에서 제공하는 hw() 함수를 사용하여 모델을 생성할 수도 있다. 다만 alpha, beta 등의 매개변수를 지정하지 않으면 자동 계산되어 적절한 값이 사용된다. 홀트-윈터 모델은 가산법(additive)와 승산법(multiplicative)의 두가지 방법이 있다. autoplot(employees.ts[,2]) + autolayer(fitted(hw(employees.ts[,2])), series = &#39;hw 적합값&#39;) + autolayer(hw(employees.ts[,2], seasonal = &#39;additive&#39;), PI = FALSE, series = &#39;additive&#39;) + autolayer(hw(employees.ts[,2], seasonal = &#39;multiplicative&#39;), PI = FALSE, series = &#39;multiplicative&#39;) summary(hw(employees.ts[,2])) ## ## Forecast method: Holt-Winters&#39; additive method ## ## Model Information: ## Holt-Winters&#39; additive method ## ## Call: ## hw(y = employees.ts[, 2]) ## ## Smoothing parameters: ## alpha = 0.9985 ## beta = 0.0147 ## gamma = 1e-04 ## ## Initial states: ## l = 25433.0105 ## b = 35.8063 ## s = -214.0764 256.3016 260.68 226.9136 162.9304 313.7855 ## 278.5719 219.3763 -4.9043 -297.3507 -579.3511 -622.8768 ## ## sigma: 134.5373 ## ## AIC AICc BIC ## 1395.828 1403.674 1439.422 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -14.96946 122.8152 78.83536 -0.0580682 0.301646 0.2487293 ## ACF1 ## Training set 0.07031624 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 26132.22 25959.80 26304.64 25868.53 26395.91 ## Feb 2021 26190.42 25944.97 26435.88 25815.03 26565.82 ## Mar 2021 26487.18 26184.42 26789.93 26024.15 26950.20 ## Apr 2021 26794.28 26442.17 27146.39 26255.78 27332.78 ## May 2021 27033.23 26636.73 27429.74 26426.83 27639.63 ## Jun 2021 27107.08 26669.61 27544.55 26438.02 27776.14 ## Jul 2021 27156.96 26681.05 27632.87 26429.11 27884.80 ## Aug 2021 27020.82 26508.41 27533.22 26237.16 27804.47 ## Sep 2021 27099.44 26552.09 27646.80 26262.34 27936.55 ## Oct 2021 27147.90 26566.85 27728.95 26259.27 28036.53 ## Nov 2021 27158.21 26544.51 27771.91 26219.63 28096.78 ## Dec 2021 26702.45 26056.97 27347.94 25715.27 27689.63 ## Jan 2022 26308.32 25631.78 26984.86 25273.65 27342.99 ## Feb 2022 26366.53 25659.58 27073.48 25285.34 27447.71 ## Mar 2022 26663.28 25926.46 27400.09 25536.41 27790.14 ## Apr 2022 26970.38 26204.17 27736.59 25798.56 28142.20 ## May 2022 27209.33 26414.14 28004.53 25993.19 28425.48 ## Jun 2022 27283.18 26459.36 28107.00 26023.26 28543.10 ## Jul 2022 27333.06 26480.94 28185.18 26029.85 28636.27 ## Aug 2022 27196.92 26316.77 28077.07 25850.85 28542.99 ## Sep 2022 27275.54 26367.62 28183.47 25886.99 28664.10 ## Oct 2022 27324.00 26388.51 28259.49 25893.29 28754.71 ## Nov 2022 27334.31 26371.45 28297.17 25861.74 28806.88 ## Dec 2022 26878.55 25888.49 27868.61 25364.38 28392.72 autoplot(employees.ts[,3]) + autolayer(fitted(hw(employees.ts[,3])), series = &#39;hw 적합값&#39;) + autolayer(hw(employees.ts[,3], seasonal = &#39;additive&#39;), PI = FALSE, series = &#39;additive&#39;) + autolayer(hw(employees.ts[,3], seasonal = &#39;multiplicative&#39;), PI = FALSE, series = &#39;multiplicative&#39;) summary(hw(employees.ts[,3])) ## ## Forecast method: Holt-Winters&#39; additive method ## ## Model Information: ## Holt-Winters&#39; additive method ## ## Call: ## hw(y = employees.ts[, 3]) ## ## Smoothing parameters: ## alpha = 0.9993 ## beta = 1e-04 ## gamma = 1e-04 ## ## Initial states: ## l = 1803.8967 ## b = 1.4736 ## s = 4.0914 11.645 10.8291 12.0963 5.0654 13.0499 ## 15.2957 6.1821 -5.524 -14.7346 -27.3353 -30.661 ## ## sigma: 22.6819 ## ## AIC AICc BIC ## 1054.015 1061.862 1097.609 ## ## Error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set -1.794203 20.70565 16.09606 -0.1054265 0.878707 0.3190346 ## ACF1 ## Training set 0.01039296 ## ## Forecasts: ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## Jan 2021 1743.702 1714.634 1772.770 1699.246 1788.158 ## Feb 2021 1748.476 1707.380 1789.571 1685.625 1811.326 ## Mar 2021 1762.544 1712.216 1812.873 1685.574 1839.515 ## Apr 2021 1773.212 1715.098 1831.326 1684.334 1862.090 ## May 2021 1786.372 1721.398 1851.346 1687.002 1885.742 ## Jun 2021 1796.939 1725.761 1868.117 1688.082 1905.797 ## Jul 2021 1796.151 1719.268 1873.035 1678.568 1913.735 ## Aug 2021 1789.618 1707.422 1871.813 1663.911 1915.325 ## Sep 2021 1798.101 1710.916 1885.286 1664.763 1931.439 ## Oct 2021 1798.296 1706.391 1890.201 1657.739 1938.853 ## Nov 2021 1800.569 1704.173 1896.964 1653.144 1947.993 ## Dec 2021 1794.467 1693.780 1895.153 1640.480 1948.453 ## Jan 2022 1761.168 1656.364 1865.971 1600.884 1921.451 ## Feb 2022 1765.941 1657.176 1874.706 1599.599 1932.283 ## Mar 2022 1780.010 1667.422 1892.598 1607.821 1952.199 ## Apr 2022 1790.677 1674.391 1906.964 1612.833 1968.522 ## May 2022 1803.838 1683.966 1923.709 1620.510 1987.165 ## Jun 2022 1814.405 1691.052 1937.757 1625.753 2003.056 ## Jul 2022 1813.617 1686.878 1940.356 1619.786 2007.447 ## Aug 2022 1807.083 1677.045 1937.121 1608.207 2005.960 ## Sep 2022 1815.567 1682.311 1948.823 1611.769 2019.365 ## Oct 2022 1815.761 1679.362 1952.160 1607.157 2024.366 ## Nov 2022 1818.034 1678.562 1957.506 1604.731 2031.337 ## Dec 2022 1811.932 1669.453 1954.411 1594.030 2029.834 https://otexts.com/fppkr/expsmooth.html https://otexts.com/fpp2/ses.html https://m.blog.naver.com/PostView.nhn?blogId=sigmagil&amp;logNo=221502514892&amp;proxyReferer=https:%2F%2Fwww.google.com%2F "],["arima-모델.html", "6.4 ARIMA 모델", " 6.4 ARIMA 모델 "],["tbat-모델.html", "6.5 TBAT 모델", " 6.5 TBAT 모델 "],["neural-network-모델.html", "6.6 Neural Network 모델", " 6.6 Neural Network 모델 "],["bootstrapping과-begging-모델.html", "6.7 Bootstrapping과 Begging 모델", " 6.7 Bootstrapping과 Begging 모델 "]]
